{:	data{)o:Nanoc::Identifier:
@type:legacy:@stringI"/content/toc/:ET{:default{	:	lastU:Nanoc::Int::TextualContent[0I"≈<ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>


;
T:rawU;[I",/pipeline/source/content/content/toc.md;
TI"›* [Getting Started](/getting_started/)
* [Hello World](/hello_world/)
* [Variables](/variables/)
  * [Result](/variables/result/)
  * [Type Casting and Inference](/variables/type_casting_inference/)
* [If, Else, While](/if_else_while/)
* [Case Statements](/case/)
* [For Loops & Iterators](/for_iterators/)
* [Procs](/procs/)
* [First Class Functions](/procvars/)
* [Blocks](/block/)
* [Primitive Types](/primitives/)
* [Type Aliases](/types/)
* [Object Types](/types/objects/)
* [Enum Types](/types/enums/)
* [Distinct Types](/types/distinct/)
* [Strings](/strings/)
* [Arrays](/arrays/)
* [Seqs](/seqs/)
* [Bitsets](/bitsets/)
* [Varargs](/varargs/)
* [Object Oriented Programming](/oop/)
* [OOP Macro](/oop_macro/)

{: #toc-list}
;
T:preU;[0I"ƒ<ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>

;
T:	post@o;;;;	I"/content/footer/;
T{;{	;U;[0I"°<li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>

;
T;U;[I"//pipeline/source/content/content/footer.md;
TI"†<li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>
;
T;@;@o;;;;	I"/assets/css/normalize/;
T{;{;U;[0I"è/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}
;
T;U;[I"6/pipeline/source/content/assets/css/normalize.css;
TI"è/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}
;
T;@$o;;;;	I"/assets/css/cotton_candy/;
T{;{;U;[0I"z#main code, code * { color: #675D69; }
code[class^='language-'] .k { color: #143A77; }
code[class^='language-'] .kp { color: #8C5DC7; }
code[class^='language-'] .kd { color: #8C5DC7; }
code[class^='language-'] .mi { color: #8C5DC7; }
code[class^='language-'] .s { color: #0060B0; }
code[class^='language-'] .c { color: #91B9A3; }
code[class^='language-'] .o { color: #009DE7; }
;
T;U;[I"9/pipeline/source/content/assets/css/cotton_candy.css;
TI"z#main code, code * { color: #675D69; }
code[class^='language-'] .k { color: #143A77; }
code[class^='language-'] .kp { color: #8C5DC7; }
code[class^='language-'] .kd { color: #8C5DC7; }
code[class^='language-'] .mi { color: #8C5DC7; }
code[class^='language-'] .s { color: #0060B0; }
code[class^='language-'] .c { color: #91B9A3; }
code[class^='language-'] .o { color: #009DE7; }
;
T;@/o;;;;	I"/assets/css/main/;
T{;{;U;[0I"∑
body {
  background: #F5F7F6;
  color: #000000;
  margin: 0; padding: 0;
  max-width: 720px;

  text-rendering: optimizelegibility;

  font-family: Palatino, serif;
  line-height: 20px;
}

#sidebar {
  margin: 15px;
  float: left;
  width: 205px;
  padding: 10px 0;

  background-color: #FFF;
  box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.5);

  transition: margin-left 1s;
}

#sidebar.collapsed { margin-left: -180px; }

#sidebar ul { padding: 0 1em; margin: 0; list-style-type: none; }
#sidebar li:before {         content: '‚ÅÉ'; padding-right: 0.5em; color: black; }
#sidebar li.visited:before { content: '‚úî'; padding-right: 0.2em; color: green; }


.abs-hamburger {
  position: relative;
  width: 0; height: 0;
}
.nav-toggle {
  position: absolute;
  left: 175px;
  width: 25px; height: 25px;
  cursor: pointer;
  margin-right: 5px;
  margin-bottom: 5px;
}
.nav-toggle span, 
.nav-toggle span:before,
.nav-toggle span:after {
  border-radius: 1px;
  height: 5px;
  width: 25px;
  background: white;
  position: absolute;
  display: block;
  content: '';
  box-shadow: inset 0px 0px 2px 0px #000;
}
.nav-toggle span:before { top: -8px; }
.nav-toggle span:after { bottom: -8px; }
.nav-toggle span { margin-top: 9.5px; }


#nextprev {
  overflow: hidden;
  padding: .5em 1em;
}

.text-icon { font-size: 5em; }
#arrow-prev { float: left; }
#arrow-next { float: right; }


article {
  margin: 15px;

  transition: max-width 1s;
}
article.expanded { max-width: 680px; }


a { text-decoration: none; }
a:link, a:visited { color: #B45D47; }
a:hover { color: #FE3B3B; }

a.disabled, a:link.disabled, a:visited.disabled { color: #999; pointer-events: none; }
a:hover.disabled { color: #888; }


pre, code { font-family: Monaco, Menlo, Consolas, "Courier New", monospace; }
code {
  border-radius: 1px;
  background-color: #FFF;
  padding: 0.2em;
}
pre code {
  display: block;
  padding: 1em;
  white-space: pre-wrap;
}


h1, h2, h3, h4, h5, h6 { line-height: 125%; }


footer {
  margin-top: 50px;
  clear: both;

  text-align: center;
  color: #777;
}
footer ul { list-style: none; margin: 0; padding: 0; }
footer li { display: inline; }
footer li+li:before { content: '|'; }
footer a:link, footer a:visited { color: #777; }
footer a:hover { color: #999; }

.notransition {
  -webkit-transition: none !important;
  -moz-transition: none !important;
  -o-transition: none !important;
  -ms-transition: none !important;
  transition: none !important;
}


@media screen and (min-width: 925px) {
  body { margin: 0 auto; }
  body #sidebar.collapsed, body #sidebar { margin-left: -205px; }
  body article.expanded, body article { max-width: none; width: none; min-width: none; }
}

@media screen and (max-width: 1200px) {
  body { margin-right: 0; }
}
;
T;U;[I"1/pipeline/source/content/assets/css/main.css;
TI"∑
body {
  background: #F5F7F6;
  color: #000000;
  margin: 0; padding: 0;
  max-width: 720px;

  text-rendering: optimizelegibility;

  font-family: Palatino, serif;
  line-height: 20px;
}

#sidebar {
  margin: 15px;
  float: left;
  width: 205px;
  padding: 10px 0;

  background-color: #FFF;
  box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.5);

  transition: margin-left 1s;
}

#sidebar.collapsed { margin-left: -180px; }

#sidebar ul { padding: 0 1em; margin: 0; list-style-type: none; }
#sidebar li:before {         content: '‚ÅÉ'; padding-right: 0.5em; color: black; }
#sidebar li.visited:before { content: '‚úî'; padding-right: 0.2em; color: green; }


.abs-hamburger {
  position: relative;
  width: 0; height: 0;
}
.nav-toggle {
  position: absolute;
  left: 175px;
  width: 25px; height: 25px;
  cursor: pointer;
  margin-right: 5px;
  margin-bottom: 5px;
}
.nav-toggle span, 
.nav-toggle span:before,
.nav-toggle span:after {
  border-radius: 1px;
  height: 5px;
  width: 25px;
  background: white;
  position: absolute;
  display: block;
  content: '';
  box-shadow: inset 0px 0px 2px 0px #000;
}
.nav-toggle span:before { top: -8px; }
.nav-toggle span:after { bottom: -8px; }
.nav-toggle span { margin-top: 9.5px; }


#nextprev {
  overflow: hidden;
  padding: .5em 1em;
}

.text-icon { font-size: 5em; }
#arrow-prev { float: left; }
#arrow-next { float: right; }


article {
  margin: 15px;

  transition: max-width 1s;
}
article.expanded { max-width: 680px; }


a { text-decoration: none; }
a:link, a:visited { color: #B45D47; }
a:hover { color: #FE3B3B; }

a.disabled, a:link.disabled, a:visited.disabled { color: #999; pointer-events: none; }
a:hover.disabled { color: #888; }


pre, code { font-family: Monaco, Menlo, Consolas, "Courier New", monospace; }
code {
  border-radius: 1px;
  background-color: #FFF;
  padding: 0.2em;
}
pre code {
  display: block;
  padding: 1em;
  white-space: pre-wrap;
}


h1, h2, h3, h4, h5, h6 { line-height: 125%; }


footer {
  margin-top: 50px;
  clear: both;

  text-align: center;
  color: #777;
}
footer ul { list-style: none; margin: 0; padding: 0; }
footer li { display: inline; }
footer li+li:before { content: '|'; }
footer a:link, footer a:visited { color: #777; }
footer a:hover { color: #999; }

.notransition {
  -webkit-transition: none !important;
  -moz-transition: none !important;
  -o-transition: none !important;
  -ms-transition: none !important;
  transition: none !important;
}


@media screen and (min-width: 925px) {
  body { margin: 0 auto; }
  body #sidebar.collapsed, body #sidebar { margin-left: -205px; }
  body article.expanded, body article { max-width: none; width: none; min-width: none; }
}

@media screen and (max-width: 1200px) {
  body { margin-right: 0; }
}
;
T;@:o;;;;	I"/assets/css/monokai/;
T{;{;U;[0I"Ubody.darkmode code[class^='language-'] { background-color: #333; color: #f8f8f2}
body.darkmode code[class^='language-'] .hll { background-color: #49483e }
body.darkmode code[class^='language-'] .c { color: #75715e } /* Comment */
body.darkmode code[class^='language-'] .err { color: #960050; background-color: #1e0010 } /* Error */
body.darkmode code[class^='language-'] .k { color: #66d9ef } /* Keyword */
body.darkmode code[class^='language-'] .l { color: #ae81ff } /* Literal */
body.darkmode code[class^='language-'] .n { color: #f8f8f2 } /* Name */
body.darkmode code[class^='language-'] .o { color: #f92672 } /* Operator */
body.darkmode code[class^='language-'] .p { color: #f8f8f2 } /* Punctuation */
body.darkmode code[class^='language-'] .cm { color: #75715e } /* Comment.Multiline */
body.darkmode code[class^='language-'] .cp { color: #75715e } /* Comment.Preproc */
body.darkmode code[class^='language-'] .c1 { color: #75715e } /* Comment.Single */
body.darkmode code[class^='language-'] .cs { color: #75715e } /* Comment.Special */
body.darkmode code[class^='language-'] .ge { font-style: italic } /* Generic.Emph */
body.darkmode code[class^='language-'] .gs { font-weight: bold } /* Generic.Strong */
body.darkmode code[class^='language-'] .kc { color: #66d9ef } /* Keyword.Constant */
body.darkmode code[class^='language-'] .kd { color: #66d9ef } /* Keyword.Declaration */
body.darkmode code[class^='language-'] .kn { color: #f92672 } /* Keyword.Namespace */
body.darkmode code[class^='language-'] .kp { color: #66d9ef } /* Keyword.Pseudo */
body.darkmode code[class^='language-'] .kr { color: #66d9ef } /* Keyword.Reserved */
body.darkmode code[class^='language-'] .kt { color: #66d9ef } /* Keyword.Type */
body.darkmode code[class^='language-'] .ld { color: #e6db74 } /* Literal.Date */
body.darkmode code[class^='language-'] .m { color: #ae81ff } /* Literal.Number */
body.darkmode code[class^='language-'] .s { color: #e6db74 } /* Literal.String */
body.darkmode code[class^='language-'] .na { color: #a6e22e } /* Name.Attribute */
body.darkmode code[class^='language-'] .nb { color: #f8f8f2 } /* Name.Builtin */
body.darkmode code[class^='language-'] .nc { color: #a6e22e } /* Name.Class */
body.darkmode code[class^='language-'] .no { color: #66d9ef } /* Name.Constant */
body.darkmode code[class^='language-'] .nd { color: #a6e22e } /* Name.Decorator */
body.darkmode code[class^='language-'] .ni { color: #f8f8f2 } /* Name.Entity */
body.darkmode code[class^='language-'] .ne { color: #a6e22e } /* Name.Exception */
body.darkmode code[class^='language-'] .nf { color: #a6e22e } /* Name.Function */
body.darkmode code[class^='language-'] .nl { color: #f8f8f2 } /* Name.Label */
body.darkmode code[class^='language-'] .nn { color: #f8f8f2 } /* Name.Namespace */
body.darkmode code[class^='language-'] .nx { color: #a6e22e } /* Name.Other */
body.darkmode code[class^='language-'] .py { color: #f8f8f2 } /* Name.Property */
body.darkmode code[class^='language-'] .nt { color: #f92672 } /* Name.Tag */
body.darkmode code[class^='language-'] .nv { color: #f8f8f2 } /* Name.Variable */
body.darkmode code[class^='language-'] .ow { color: #f92672 } /* Operator.Word */
body.darkmode code[class^='language-'] .w { color: #f8f8f2 } /* Text.Whitespace */
body.darkmode code[class^='language-'] .mf { color: #ae81ff } /* Literal.Number.Float */
body.darkmode code[class^='language-'] .mh { color: #ae81ff } /* Literal.Number.Hex */
body.darkmode code[class^='language-'] .mi { color: #ae81ff } /* Literal.Number.Integer */
body.darkmode code[class^='language-'] .mo { color: #ae81ff } /* Literal.Number.Oct */
body.darkmode code[class^='language-'] .sb { color: #e6db74 } /* Literal.String.Backtick */
body.darkmode code[class^='language-'] .sc { color: #e6db74 } /* Literal.String.Char */
body.darkmode code[class^='language-'] .sd { color: #e6db74 } /* Literal.String.Doc */
body.darkmode code[class^='language-'] .s2 { color: #e6db74 } /* Literal.String.Double */
body.darkmode code[class^='language-'] .se { color: #ae81ff } /* Literal.String.Escape */
body.darkmode code[class^='language-'] .sh { color: #e6db74 } /* Literal.String.Heredoc */
body.darkmode code[class^='language-'] .si { color: #e6db74 } /* Literal.String.Interpol */
body.darkmode code[class^='language-'] .sx { color: #e6db74 } /* Literal.String.Other */
body.darkmode code[class^='language-'] .sr { color: #e6db74 } /* Literal.String.Regex */
body.darkmode code[class^='language-'] .s1 { color: #e6db74 } /* Literal.String.Single */
body.darkmode code[class^='language-'] .ss { color: #e6db74 } /* Literal.String.Symbol */
body.darkmode code[class^='language-'] .bp { color: #f8f8f2 } /* Name.Builtin.Pseudo */
body.darkmode code[class^='language-'] .vc { color: #f8f8f2 } /* Name.Variable.Class */
body.darkmode code[class^='language-'] .vg { color: #f8f8f2 } /* Name.Variable.Global */
body.darkmode code[class^='language-'] .vi { color: #f8f8f2 } /* Name.Variable.Instance */
body.darkmode code[class^='language-'] .il { color: #ae81ff } /* Literal.Number.Integer.Long */
body.darkmode code[class^='language-'] .gh { } /* Generic Heading & Diff Header */
body.darkmode code[class^='language-'] .gu { color: #75715e; } /* Generic.Subheading & Diff Unified/Comment? */
body.darkmode code[class^='language-'] .gd { color: #f92672; } /* Generic.Deleted & Diff Deleted */
body.darkmode code[class^='language-'] .gi { color: #a6e22e; } /* Generic.Inserted & Diff Inserted */
;
T;U;[I"4/pipeline/source/content/assets/css/monokai.css;
TI"Ubody.darkmode code[class^='language-'] { background-color: #333; color: #f8f8f2}
body.darkmode code[class^='language-'] .hll { background-color: #49483e }
body.darkmode code[class^='language-'] .c { color: #75715e } /* Comment */
body.darkmode code[class^='language-'] .err { color: #960050; background-color: #1e0010 } /* Error */
body.darkmode code[class^='language-'] .k { color: #66d9ef } /* Keyword */
body.darkmode code[class^='language-'] .l { color: #ae81ff } /* Literal */
body.darkmode code[class^='language-'] .n { color: #f8f8f2 } /* Name */
body.darkmode code[class^='language-'] .o { color: #f92672 } /* Operator */
body.darkmode code[class^='language-'] .p { color: #f8f8f2 } /* Punctuation */
body.darkmode code[class^='language-'] .cm { color: #75715e } /* Comment.Multiline */
body.darkmode code[class^='language-'] .cp { color: #75715e } /* Comment.Preproc */
body.darkmode code[class^='language-'] .c1 { color: #75715e } /* Comment.Single */
body.darkmode code[class^='language-'] .cs { color: #75715e } /* Comment.Special */
body.darkmode code[class^='language-'] .ge { font-style: italic } /* Generic.Emph */
body.darkmode code[class^='language-'] .gs { font-weight: bold } /* Generic.Strong */
body.darkmode code[class^='language-'] .kc { color: #66d9ef } /* Keyword.Constant */
body.darkmode code[class^='language-'] .kd { color: #66d9ef } /* Keyword.Declaration */
body.darkmode code[class^='language-'] .kn { color: #f92672 } /* Keyword.Namespace */
body.darkmode code[class^='language-'] .kp { color: #66d9ef } /* Keyword.Pseudo */
body.darkmode code[class^='language-'] .kr { color: #66d9ef } /* Keyword.Reserved */
body.darkmode code[class^='language-'] .kt { color: #66d9ef } /* Keyword.Type */
body.darkmode code[class^='language-'] .ld { color: #e6db74 } /* Literal.Date */
body.darkmode code[class^='language-'] .m { color: #ae81ff } /* Literal.Number */
body.darkmode code[class^='language-'] .s { color: #e6db74 } /* Literal.String */
body.darkmode code[class^='language-'] .na { color: #a6e22e } /* Name.Attribute */
body.darkmode code[class^='language-'] .nb { color: #f8f8f2 } /* Name.Builtin */
body.darkmode code[class^='language-'] .nc { color: #a6e22e } /* Name.Class */
body.darkmode code[class^='language-'] .no { color: #66d9ef } /* Name.Constant */
body.darkmode code[class^='language-'] .nd { color: #a6e22e } /* Name.Decorator */
body.darkmode code[class^='language-'] .ni { color: #f8f8f2 } /* Name.Entity */
body.darkmode code[class^='language-'] .ne { color: #a6e22e } /* Name.Exception */
body.darkmode code[class^='language-'] .nf { color: #a6e22e } /* Name.Function */
body.darkmode code[class^='language-'] .nl { color: #f8f8f2 } /* Name.Label */
body.darkmode code[class^='language-'] .nn { color: #f8f8f2 } /* Name.Namespace */
body.darkmode code[class^='language-'] .nx { color: #a6e22e } /* Name.Other */
body.darkmode code[class^='language-'] .py { color: #f8f8f2 } /* Name.Property */
body.darkmode code[class^='language-'] .nt { color: #f92672 } /* Name.Tag */
body.darkmode code[class^='language-'] .nv { color: #f8f8f2 } /* Name.Variable */
body.darkmode code[class^='language-'] .ow { color: #f92672 } /* Operator.Word */
body.darkmode code[class^='language-'] .w { color: #f8f8f2 } /* Text.Whitespace */
body.darkmode code[class^='language-'] .mf { color: #ae81ff } /* Literal.Number.Float */
body.darkmode code[class^='language-'] .mh { color: #ae81ff } /* Literal.Number.Hex */
body.darkmode code[class^='language-'] .mi { color: #ae81ff } /* Literal.Number.Integer */
body.darkmode code[class^='language-'] .mo { color: #ae81ff } /* Literal.Number.Oct */
body.darkmode code[class^='language-'] .sb { color: #e6db74 } /* Literal.String.Backtick */
body.darkmode code[class^='language-'] .sc { color: #e6db74 } /* Literal.String.Char */
body.darkmode code[class^='language-'] .sd { color: #e6db74 } /* Literal.String.Doc */
body.darkmode code[class^='language-'] .s2 { color: #e6db74 } /* Literal.String.Double */
body.darkmode code[class^='language-'] .se { color: #ae81ff } /* Literal.String.Escape */
body.darkmode code[class^='language-'] .sh { color: #e6db74 } /* Literal.String.Heredoc */
body.darkmode code[class^='language-'] .si { color: #e6db74 } /* Literal.String.Interpol */
body.darkmode code[class^='language-'] .sx { color: #e6db74 } /* Literal.String.Other */
body.darkmode code[class^='language-'] .sr { color: #e6db74 } /* Literal.String.Regex */
body.darkmode code[class^='language-'] .s1 { color: #e6db74 } /* Literal.String.Single */
body.darkmode code[class^='language-'] .ss { color: #e6db74 } /* Literal.String.Symbol */
body.darkmode code[class^='language-'] .bp { color: #f8f8f2 } /* Name.Builtin.Pseudo */
body.darkmode code[class^='language-'] .vc { color: #f8f8f2 } /* Name.Variable.Class */
body.darkmode code[class^='language-'] .vg { color: #f8f8f2 } /* Name.Variable.Global */
body.darkmode code[class^='language-'] .vi { color: #f8f8f2 } /* Name.Variable.Instance */
body.darkmode code[class^='language-'] .il { color: #ae81ff } /* Literal.Number.Integer.Long */
body.darkmode code[class^='language-'] .gh { } /* Generic Heading & Diff Header */
body.darkmode code[class^='language-'] .gu { color: #75715e; } /* Generic.Subheading & Diff Unified/Comment? */
body.darkmode code[class^='language-'] .gd { color: #f92672; } /* Generic.Deleted & Diff Deleted */
body.darkmode code[class^='language-'] .gi { color: #a6e22e; } /* Generic.Inserted & Diff Inserted */
;
T;@Eo;;;;	I"/assets/css/colorful/;
T{;{;U;[0I"//* pygments-css colorful */
code[class^='language-'] .gp {
  color: #c65d09;
  font-weight: bold;
  /* NOTE: Hacks to allow copy-paste */
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
} /* Generic.Prompt */
body:not(.darkmode) code[class^='language-'] .hll { background-color: #ffffcc }
body:not(.darkmode) code[class^='language-'] .c { color: #808080 } /* Comment */
body:not(.darkmode) code[class^='language-'] .err { color: #F00000; background-color: #F0A0A0 } /* Error */
body:not(.darkmode) code[class^='language-'] .k { color: #008000; font-weight: bold } /* Keyword */
body:not(.darkmode) code[class^='language-'] .o { color: #303030 } /* Operator */
body:not(.darkmode) code[class^='language-'] .cm { color: #808080 } /* Comment.Multiline */
body:not(.darkmode) code[class^='language-'] .cp { color: #507090 } /* Comment.Preproc */
body:not(.darkmode) code[class^='language-'] .c1 { color: #808080 } /* Comment.Single */
body:not(.darkmode) code[class^='language-'] .cs { color: #cc0000; font-weight: bold } /* Comment.Special */
body:not(.darkmode) code[class^='language-'] .gd { color: #A00000 } /* Generic.Deleted */
body:not(.darkmode) code[class^='language-'] .ge { font-style: italic } /* Generic.Emph */
body:not(.darkmode) code[class^='language-'] .gr { color: #FF0000 } /* Generic.Error */
body:not(.darkmode) code[class^='language-'] .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body:not(.darkmode) code[class^='language-'] .gi { color: #00A000 } /* Generic.Inserted */
body:not(.darkmode) code[class^='language-'] .go { color: #808080 } /* Generic.Output */
body:not(.darkmode) code[class^='language-'] .gs { font-weight: bold } /* Generic.Strong */
body:not(.darkmode) code[class^='language-'] .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body:not(.darkmode) code[class^='language-'] .gt { color: #0040D0 } /* Generic.Traceback */
body:not(.darkmode) code[class^='language-'] .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
body:not(.darkmode) code[class^='language-'] .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
body:not(.darkmode) code[class^='language-'] .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
body:not(.darkmode) code[class^='language-'] .kp { color: #003080; font-weight: bold } /* Keyword.Pseudo */
body:not(.darkmode) code[class^='language-'] .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
body:not(.darkmode) code[class^='language-'] .kt { color: #303090; font-weight: bold } /* Keyword.Type */
body:not(.darkmode) code[class^='language-'] .m { color: #6000E0; font-weight: bold } /* Literal.Number */
body:not(.darkmode) code[class^='language-'] .s { background-color: #fff0f0 } /* Literal.String */
body:not(.darkmode) code[class^='language-'] .na { color: #0000C0 } /* Name.Attribute */
body:not(.darkmode) code[class^='language-'] .nb { color: #007020 } /* Name.Builtin */
body:not(.darkmode) code[class^='language-'] .nc { color: #B00060; font-weight: bold } /* Name.Class */
body:not(.darkmode) code[class^='language-'] .no { color: #003060; font-weight: bold } /* Name.Constant */
body:not(.darkmode) code[class^='language-'] .nd { color: #505050; font-weight: bold } /* Name.Decorator */
body:not(.darkmode) code[class^='language-'] .ni { color: #800000; font-weight: bold } /* Name.Entity */
body:not(.darkmode) code[class^='language-'] .ne { color: #F00000; font-weight: bold } /* Name.Exception */
body:not(.darkmode) code[class^='language-'] .nf { color: #0060B0; font-weight: bold } /* Name.Function */
body:not(.darkmode) code[class^='language-'] .nl { color: #907000; font-weight: bold } /* Name.Label */
body:not(.darkmode) code[class^='language-'] .nn { color: #0e84b5; font-weight: bold } /* Name.Namespace */
body:not(.darkmode) code[class^='language-'] .nt { color: #007000 } /* Name.Tag */
body:not(.darkmode) code[class^='language-'] .nv { color: #906030 } /* Name.Variable */
body:not(.darkmode) code[class^='language-'] .ow { color: #000000; font-weight: bold } /* Operator.Word */
body:not(.darkmode) code[class^='language-'] .w { color: #bbbbbb } /* Text.Whitespace */
body:not(.darkmode) code[class^='language-'] .mf { color: #6000E0; font-weight: bold } /* Literal.Number.Float */
body:not(.darkmode) code[class^='language-'] .mh { color: #005080; font-weight: bold } /* Literal.Number.Hex */
body:not(.darkmode) code[class^='language-'] .mi { color: #0000D0; font-weight: bold } /* Literal.Number.Integer */
body:not(.darkmode) code[class^='language-'] .mo { color: #4000E0; font-weight: bold } /* Literal.Number.Oct */
body:not(.darkmode) code[class^='language-'] .sb { background-color: #fff0f0 } /* Literal.String.Backtick */
body:not(.darkmode) code[class^='language-'] .sc { color: #0040D0 } /* Literal.String.Char */
body:not(.darkmode) code[class^='language-'] .sd { color: #D04020 } /* Literal.String.Doc */
body:not(.darkmode) code[class^='language-'] .s2 { background-color: #fff0f0 } /* Literal.String.Double */
body:not(.darkmode) code[class^='language-'] .se { color: #606060; font-weight: bold; background-color: #fff0f0 } /* Literal.String.Escape */
body:not(.darkmode) code[class^='language-'] .sh { background-color: #fff0f0 } /* Literal.String.Heredoc */
body:not(.darkmode) code[class^='language-'] .si { background-color: #e0e0e0 } /* Literal.String.Interpol */
body:not(.darkmode) code[class^='language-'] .sx { color: #D02000; background-color: #fff0f0 } /* Literal.String.Other */
body:not(.darkmode) code[class^='language-'] .sr { color: #000000; background-color: #fff0ff } /* Literal.String.Regex */
body:not(.darkmode) code[class^='language-'] .s1 { background-color: #fff0f0 } /* Literal.String.Single */
body:not(.darkmode) code[class^='language-'] .ss { color: #A06000 } /* Literal.String.Symbol */
body:not(.darkmode) code[class^='language-'] .bp { color: #007020 } /* Name.Builtin.Pseudo */
body:not(.darkmode) code[class^='language-'] .vc { color: #306090 } /* Name.Variable.Class */
body:not(.darkmode) code[class^='language-'] .vg { color: #d07000; font-weight: bold } /* Name.Variable.Global */
body:not(.darkmode) code[class^='language-'] .vi { color: #3030B0 } /* Name.Variable.Instance */
body:not(.darkmode) code[class^='language-'] .il { color: #0000D0; font-weight: bold } /* Literal.Number.Integer.Long */
;
T;U;[I"5/pipeline/source/content/assets/css/colorful.css;
TI"//* pygments-css colorful */
code[class^='language-'] .gp {
  color: #c65d09;
  font-weight: bold;
  /* NOTE: Hacks to allow copy-paste */
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
} /* Generic.Prompt */
body:not(.darkmode) code[class^='language-'] .hll { background-color: #ffffcc }
body:not(.darkmode) code[class^='language-'] .c { color: #808080 } /* Comment */
body:not(.darkmode) code[class^='language-'] .err { color: #F00000; background-color: #F0A0A0 } /* Error */
body:not(.darkmode) code[class^='language-'] .k { color: #008000; font-weight: bold } /* Keyword */
body:not(.darkmode) code[class^='language-'] .o { color: #303030 } /* Operator */
body:not(.darkmode) code[class^='language-'] .cm { color: #808080 } /* Comment.Multiline */
body:not(.darkmode) code[class^='language-'] .cp { color: #507090 } /* Comment.Preproc */
body:not(.darkmode) code[class^='language-'] .c1 { color: #808080 } /* Comment.Single */
body:not(.darkmode) code[class^='language-'] .cs { color: #cc0000; font-weight: bold } /* Comment.Special */
body:not(.darkmode) code[class^='language-'] .gd { color: #A00000 } /* Generic.Deleted */
body:not(.darkmode) code[class^='language-'] .ge { font-style: italic } /* Generic.Emph */
body:not(.darkmode) code[class^='language-'] .gr { color: #FF0000 } /* Generic.Error */
body:not(.darkmode) code[class^='language-'] .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body:not(.darkmode) code[class^='language-'] .gi { color: #00A000 } /* Generic.Inserted */
body:not(.darkmode) code[class^='language-'] .go { color: #808080 } /* Generic.Output */
body:not(.darkmode) code[class^='language-'] .gs { font-weight: bold } /* Generic.Strong */
body:not(.darkmode) code[class^='language-'] .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body:not(.darkmode) code[class^='language-'] .gt { color: #0040D0 } /* Generic.Traceback */
body:not(.darkmode) code[class^='language-'] .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
body:not(.darkmode) code[class^='language-'] .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
body:not(.darkmode) code[class^='language-'] .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
body:not(.darkmode) code[class^='language-'] .kp { color: #003080; font-weight: bold } /* Keyword.Pseudo */
body:not(.darkmode) code[class^='language-'] .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
body:not(.darkmode) code[class^='language-'] .kt { color: #303090; font-weight: bold } /* Keyword.Type */
body:not(.darkmode) code[class^='language-'] .m { color: #6000E0; font-weight: bold } /* Literal.Number */
body:not(.darkmode) code[class^='language-'] .s { background-color: #fff0f0 } /* Literal.String */
body:not(.darkmode) code[class^='language-'] .na { color: #0000C0 } /* Name.Attribute */
body:not(.darkmode) code[class^='language-'] .nb { color: #007020 } /* Name.Builtin */
body:not(.darkmode) code[class^='language-'] .nc { color: #B00060; font-weight: bold } /* Name.Class */
body:not(.darkmode) code[class^='language-'] .no { color: #003060; font-weight: bold } /* Name.Constant */
body:not(.darkmode) code[class^='language-'] .nd { color: #505050; font-weight: bold } /* Name.Decorator */
body:not(.darkmode) code[class^='language-'] .ni { color: #800000; font-weight: bold } /* Name.Entity */
body:not(.darkmode) code[class^='language-'] .ne { color: #F00000; font-weight: bold } /* Name.Exception */
body:not(.darkmode) code[class^='language-'] .nf { color: #0060B0; font-weight: bold } /* Name.Function */
body:not(.darkmode) code[class^='language-'] .nl { color: #907000; font-weight: bold } /* Name.Label */
body:not(.darkmode) code[class^='language-'] .nn { color: #0e84b5; font-weight: bold } /* Name.Namespace */
body:not(.darkmode) code[class^='language-'] .nt { color: #007000 } /* Name.Tag */
body:not(.darkmode) code[class^='language-'] .nv { color: #906030 } /* Name.Variable */
body:not(.darkmode) code[class^='language-'] .ow { color: #000000; font-weight: bold } /* Operator.Word */
body:not(.darkmode) code[class^='language-'] .w { color: #bbbbbb } /* Text.Whitespace */
body:not(.darkmode) code[class^='language-'] .mf { color: #6000E0; font-weight: bold } /* Literal.Number.Float */
body:not(.darkmode) code[class^='language-'] .mh { color: #005080; font-weight: bold } /* Literal.Number.Hex */
body:not(.darkmode) code[class^='language-'] .mi { color: #0000D0; font-weight: bold } /* Literal.Number.Integer */
body:not(.darkmode) code[class^='language-'] .mo { color: #4000E0; font-weight: bold } /* Literal.Number.Oct */
body:not(.darkmode) code[class^='language-'] .sb { background-color: #fff0f0 } /* Literal.String.Backtick */
body:not(.darkmode) code[class^='language-'] .sc { color: #0040D0 } /* Literal.String.Char */
body:not(.darkmode) code[class^='language-'] .sd { color: #D04020 } /* Literal.String.Doc */
body:not(.darkmode) code[class^='language-'] .s2 { background-color: #fff0f0 } /* Literal.String.Double */
body:not(.darkmode) code[class^='language-'] .se { color: #606060; font-weight: bold; background-color: #fff0f0 } /* Literal.String.Escape */
body:not(.darkmode) code[class^='language-'] .sh { background-color: #fff0f0 } /* Literal.String.Heredoc */
body:not(.darkmode) code[class^='language-'] .si { background-color: #e0e0e0 } /* Literal.String.Interpol */
body:not(.darkmode) code[class^='language-'] .sx { color: #D02000; background-color: #fff0f0 } /* Literal.String.Other */
body:not(.darkmode) code[class^='language-'] .sr { color: #000000; background-color: #fff0ff } /* Literal.String.Regex */
body:not(.darkmode) code[class^='language-'] .s1 { background-color: #fff0f0 } /* Literal.String.Single */
body:not(.darkmode) code[class^='language-'] .ss { color: #A06000 } /* Literal.String.Symbol */
body:not(.darkmode) code[class^='language-'] .bp { color: #007020 } /* Name.Builtin.Pseudo */
body:not(.darkmode) code[class^='language-'] .vc { color: #306090 } /* Name.Variable.Class */
body:not(.darkmode) code[class^='language-'] .vg { color: #d07000; font-weight: bold } /* Name.Variable.Global */
body:not(.darkmode) code[class^='language-'] .vi { color: #3030B0 } /* Name.Variable.Instance */
body:not(.darkmode) code[class^='language-'] .il { color: #0000D0; font-weight: bold } /* Literal.Number.Integer.Long */
;
T;@Po;;;;	I"/assets/js/main/;
T{;{;U;[0I"function setVisibleTags(){
  var tocLinks = document.querySelectorAll("#sidebar a:link, a:visited");
   for(var i = 0; i < tocLinks.length; i++){
     if(localStorage.getItem(tocLinks[i].getAttribute("href")) != null){
       tocLinks[i].parentNode.classList.add("visited");
     }
   }
}

function updateSidebar(notransition) {
  if (notransition) {
    document.querySelectorAll("#sidebar")[0].classList.add("notransition");
    document.querySelectorAll("article")[0].classList.add("notransition");
  }
  localStorage.setItem("openside", window.sidebarExpanded);
  if (!window.sidebarExpanded) {
    document.querySelectorAll("#sidebar")[0].classList.add("collapsed");
    document.querySelectorAll("article")[0].classList.add("expanded");
  } else {
    document.querySelectorAll("#sidebar")[0].classList.remove("collapsed");
    document.querySelectorAll("article")[0].classList.remove("expanded");
  }
  if (notransition) {
    setTimeout(function(){
      document.querySelectorAll("#sidebar")[0].classList.remove("notransition");
      document.querySelectorAll("article")[0].classList.remove("notransition");
    }, 100);
  }
}

function sidebarClick() {
  window.sidebarExpanded = !window.sidebarExpanded;
  updateSidebar(false);
}

function getNextPrev() {
  // thanks iznogoodd from #nim @ freenode.net
  var links = document.querySelectorAll('#sidebar a[href]');

  var nav = {prev: null, next: null};
  for(var i = 0; i < links.length; i++){
    var item = links.item(i);
    if(item && item.getAttribute('href') === window.location.pathname){
      nav.prev = links.item(i - 1) && links.item(i - 1).getAttribute('href');
      nav.next = links.item(i + 1) && links.item(i + 1).getAttribute('href');
      return nav;
    }
  }
}

function updateNextPrevButtons() {
  var nav = getNextPrev();

  var prev = document.getElementById("arrow-prev");
  var next = document.getElementById("arrow-next");

  if (nav.prev != null) { prev.classList.remove("disabled"); prev.href = nav.prev; }
  if (nav.next != null) { next.classList.remove("disabled"); next.href = nav.next; }
}

var darkmodeOn = (localStorage.getItem("darkmode") === "true");
function toggleDarkMode() {
  darkmodeOn = !darkmodeOn;
  document.getElementsByTagName("body")[0].classList.toggle("darkmode");
  localStorage.setItem("darkmode", darkmodeOn);
}

function initDarkMode() {
  if (darkmodeOn)
    document.getElementsByTagName("body")[0].classList.add("darkmode");
}


var isMobile = window.screen.width < 720;
if (localStorage.getItem("openside") === null) {
  window.sidebarExpanded = !isMobile;
} else {
  window.sidebarExpanded = (localStorage.getItem("openside") === "true");
}

localStorage.setItem(window.location.pathname, true);
window.onload = function(){
  updateSidebar(true);
  initDarkMode();
  setVisibleTags();
  updateNextPrevButtons();
}
;
T;U;[I"//pipeline/source/content/assets/js/main.js;
TI"function setVisibleTags(){
  var tocLinks = document.querySelectorAll("#sidebar a:link, a:visited");
   for(var i = 0; i < tocLinks.length; i++){
     if(localStorage.getItem(tocLinks[i].getAttribute("href")) != null){
       tocLinks[i].parentNode.classList.add("visited");
     }
   }
}

function updateSidebar(notransition) {
  if (notransition) {
    document.querySelectorAll("#sidebar")[0].classList.add("notransition");
    document.querySelectorAll("article")[0].classList.add("notransition");
  }
  localStorage.setItem("openside", window.sidebarExpanded);
  if (!window.sidebarExpanded) {
    document.querySelectorAll("#sidebar")[0].classList.add("collapsed");
    document.querySelectorAll("article")[0].classList.add("expanded");
  } else {
    document.querySelectorAll("#sidebar")[0].classList.remove("collapsed");
    document.querySelectorAll("article")[0].classList.remove("expanded");
  }
  if (notransition) {
    setTimeout(function(){
      document.querySelectorAll("#sidebar")[0].classList.remove("notransition");
      document.querySelectorAll("article")[0].classList.remove("notransition");
    }, 100);
  }
}

function sidebarClick() {
  window.sidebarExpanded = !window.sidebarExpanded;
  updateSidebar(false);
}

function getNextPrev() {
  // thanks iznogoodd from #nim @ freenode.net
  var links = document.querySelectorAll('#sidebar a[href]');

  var nav = {prev: null, next: null};
  for(var i = 0; i < links.length; i++){
    var item = links.item(i);
    if(item && item.getAttribute('href') === window.location.pathname){
      nav.prev = links.item(i - 1) && links.item(i - 1).getAttribute('href');
      nav.next = links.item(i + 1) && links.item(i + 1).getAttribute('href');
      return nav;
    }
  }
}

function updateNextPrevButtons() {
  var nav = getNextPrev();

  var prev = document.getElementById("arrow-prev");
  var next = document.getElementById("arrow-next");

  if (nav.prev != null) { prev.classList.remove("disabled"); prev.href = nav.prev; }
  if (nav.next != null) { next.classList.remove("disabled"); next.href = nav.next; }
}

var darkmodeOn = (localStorage.getItem("darkmode") === "true");
function toggleDarkMode() {
  darkmodeOn = !darkmodeOn;
  document.getElementsByTagName("body")[0].classList.toggle("darkmode");
  localStorage.setItem("darkmode", darkmodeOn);
}

function initDarkMode() {
  if (darkmodeOn)
    document.getElementsByTagName("body")[0].classList.add("darkmode");
}


var isMobile = window.screen.width < 720;
if (localStorage.getItem("openside") === null) {
  window.sidebarExpanded = !isMobile;
} else {
  window.sidebarExpanded = (localStorage.getItem("openside") === "true");
}

localStorage.setItem(window.location.pathname, true);
window.onload = function(){
  updateSidebar(true);
  initDarkMode();
  setVisibleTags();
  updateNextPrevButtons();
}
;
T;@[o;;;;	I"/assets/js/all/;
T{;{;U;[0I"function setVisibleTags(){
  var tocLinks = document.querySelectorAll("#sidebar a:link, a:visited");
   for(var i = 0; i < tocLinks.length; i++){
     if(localStorage.getItem(tocLinks[i].getAttribute("href")) != null){
       tocLinks[i].parentNode.classList.add("visited");
     }
   }
}

function updateSidebar(notransition) {
  if (notransition) {
    document.querySelectorAll("#sidebar")[0].classList.add("notransition");
    document.querySelectorAll("article")[0].classList.add("notransition");
  }
  localStorage.setItem("openside", window.sidebarExpanded);
  if (!window.sidebarExpanded) {
    document.querySelectorAll("#sidebar")[0].classList.add("collapsed");
    document.querySelectorAll("article")[0].classList.add("expanded");
  } else {
    document.querySelectorAll("#sidebar")[0].classList.remove("collapsed");
    document.querySelectorAll("article")[0].classList.remove("expanded");
  }
  if (notransition) {
    setTimeout(function(){
      document.querySelectorAll("#sidebar")[0].classList.remove("notransition");
      document.querySelectorAll("article")[0].classList.remove("notransition");
    }, 100);
  }
}

function sidebarClick() {
  window.sidebarExpanded = !window.sidebarExpanded;
  updateSidebar(false);
}

function getNextPrev() {
  // thanks iznogoodd from #nim @ freenode.net
  var links = document.querySelectorAll('#sidebar a[href]');

  var nav = {prev: null, next: null};
  for(var i = 0; i < links.length; i++){
    var item = links.item(i);
    if(item && item.getAttribute('href') === window.location.pathname){
      nav.prev = links.item(i - 1) && links.item(i - 1).getAttribute('href');
      nav.next = links.item(i + 1) && links.item(i + 1).getAttribute('href');
      return nav;
    }
  }
}

function updateNextPrevButtons() {
  var nav = getNextPrev();

  var prev = document.getElementById("arrow-prev");
  var next = document.getElementById("arrow-next");

  if (nav.prev != null) { prev.classList.remove("disabled"); prev.href = nav.prev; }
  if (nav.next != null) { next.classList.remove("disabled"); next.href = nav.next; }
}

var darkmodeOn = (localStorage.getItem("darkmode") === "true");
function toggleDarkMode() {
  darkmodeOn = !darkmodeOn;
  document.getElementsByTagName("body")[0].classList.toggle("darkmode");
  localStorage.setItem("darkmode", darkmodeOn);
}

function initDarkMode() {
  if (darkmodeOn)
    document.getElementsByTagName("body")[0].classList.add("darkmode");
}


var isMobile = window.screen.width < 720;
if (localStorage.getItem("openside") === null) {
  window.sidebarExpanded = !isMobile;
} else {
  window.sidebarExpanded = (localStorage.getItem("openside") === "true");
}

localStorage.setItem(window.location.pathname, true);
window.onload = function(){
  updateSidebar(true);
  initDarkMode();
  setVisibleTags();
  updateNextPrevButtons();
}

;
T;U;[I"./pipeline/source/content/assets/js/all.js;
TI"%<%= all_js @config[:scripts] %>
;
T;@fo;;;;	I"/assets/css/all/;
T{;{;U;[0I"+0html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e};
T;U;[I"0/pipeline/source/content/assets/css/all.css;
TI"*<%= all_css @config[:stylesheets] %>
;
T;@qo;;;;	I"/content/variables/result/;
T{;{	;U;[0I"ØB<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Result</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="result">Result</h1>

<p>The <code>result</code> variable is a special variable that serves as an implicit return variable, which exists because the control flow semantics of the <code>return</code> statement are rarely needed. The result variable is initialized in the standard way, as if it was declared with <code>var result: ReturnType</code>. For example, the <code>getAlphabet()</code> function could be rewritten more concisely as</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">getAlphabet</span><span class="p">():</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="s">""</span>
  <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="sc">'a'</span><span class="p">..</span><span class="sc">'z'</span><span class="p">:</span>
    <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span></code></pre>

<p>A possible gotcha is declaring a new variable called <code>result</code> and expecting it to have the same semantics.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">unexpected</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="n">result</span> <span class="o">+=</span> <span class="mi">5</span>

<span class="n">echo</span> <span class="n">unexpected</span><span class="p">()</span>  <span class="c"># Prints 0, not 10</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"9/pipeline/source/content/content/variables/result.md;
TI"¬# Result

The `result` variable is a special variable that serves as an implicit return variable, which exists because the control flow semantics of the `return` statement are rarely needed. The result variable is initialized in the standard way, as if it was declared with `var result: ReturnType`. For example, the `getAlphabet()` function could be rewritten more concisely as

``` nimrod
proc getAlphabet(): string =
  result = ""
  for letter in 'a'..'z':
    result.add(letter)
```

A possible gotcha is declaring a new variable called `result` and expecting it to have the same semantics.

``` nimrod
proc unexpected(): int =
  var result = 5
  result += 5

echo unexpected()  # Prints 0, not 10
```
;
T;U;[0I"π<h1 id="result">Result</h1>

<p>The <code>result</code> variable is a special variable that serves as an implicit return variable, which exists because the control flow semantics of the <code>return</code> statement are rarely needed. The result variable is initialized in the standard way, as if it was declared with <code>var result: ReturnType</code>. For example, the <code>getAlphabet()</code> function could be rewritten more concisely as</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">getAlphabet</span><span class="p">():</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="s">""</span>
  <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="sc">'a'</span><span class="p">..</span><span class="sc">'z'</span><span class="p">:</span>
    <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span></code></pre>

<p>A possible gotcha is declaring a new variable called <code>result</code> and expecting it to have the same semantics.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">unexpected</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="n">result</span> <span class="o">+=</span> <span class="mi">5</span>

<span class="n">echo</span> <span class="n">unexpected</span><span class="p">()</span>  <span class="c"># Prints 0, not 10</span></code></pre>
;
T;@|o;;;;	I"//content/variables/type_casting_inference/;
T{;{	;U;[0I"‰G<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Type Casting and Inference</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="type-casting-and-inference">Type Casting and Inference</h1>

<p>Nim is a statically typed language. As such, each variable has a type associated with it. As seen in the previous example these types are inferred in the <code>const</code>, <code>let</code> and <code>var</code> declarations by the compiler.</p>

<pre><code class="language-nimrod"><span class="c"># These types are inferred.</span>
<span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span> <span class="c"># int</span>
<span class="kd">var</span> <span class="n">y</span> <span class="o">=</span> <span class="s">"foo"</span> <span class="c"># string</span>

<span class="c"># Assigning a value of a different type will result in a compile-time error.</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">y</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r typeinference.nim
<span class="go">typeinference.nim(6, 4) Error: type mismatch: got (string) but expected 'int'</span></code></pre>

<p>You may optionally specify the type after a colon (<code>:</code>). In some cases the compiler will expect you to explicitly cast types, for which two ways are available:</p>

<ul>
  <li>type conversion, whose safety checked by the compiler</li>
  <li>the <code>cast</code> keyword, which is unsafe and should be used only where you know what you are doing, such as in interfacing with C</li>
</ul>

<pre><code class="language-nimrod"><span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="c"># type conversion</span>

<span class="kd">var</span> <span class="n">y</span> <span class="o">=</span> <span class="s">"Foobar"</span>
<span class="k">proc </span><span class="nf">ffi</span><span class="p">(</span><span class="n">foo</span><span class="p">:</span> <span class="k">ptr</span> <span class="kt">array</span><span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="kt">char</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span> <span class="n">echo</span> <span class="n">repr</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
<span class="n">ffi</span><span class="p">(</span><span class="k">cast</span><span class="o">[</span><span class="k">ptr</span> <span class="kt">array</span><span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="kt">char</span><span class="o">]]</span><span class="p">(</span><span class="k">addr</span> <span class="n">y</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">))</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r typecasting.nim
<span class="go">ref 002C8030 --&gt; ['F', 'o', 'o', 'b', 'a', 'r']</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"I/pipeline/source/content/content/variables/type_casting_inference.md;
TI"j# Type Casting and Inference

Nim is a statically typed language. As such, each variable has a type associated with it. As seen in the previous example these types are inferred in the `const`, `let` and `var` declarations by the compiler.

```nimrod
# These types are inferred.
var x = 5 # int
var y = "foo" # string

# Assigning a value of a different type will result in a compile-time error.
x = y
```

```console
$ nim c -r typeinference.nim
typeinference.nim(6, 4) Error: type mismatch: got (string) but expected 'int'
```

You may optionally specify the type after a colon (`:`). In some cases the compiler will expect you to explicitly cast types, for which two ways are available:

 - type conversion, whose safety checked by the compiler
 - the `cast` keyword, which is unsafe and should be used only where you know what you are doing, such as in interfacing with C

```nimrod
var x = int(1.0 / 3) # type conversion

var y = "Foobar"
proc ffi(foo: ptr array[6, char]) = echo repr(foo)
ffi(cast[ptr array[6, char]](addr y[0]))
```

```console
$ nim c -r typecasting.nim
ref 002C8030 --> ['F', 'o', 'o', 'b', 'a', 'r']
```
;
T;U;[0I"⁄<h1 id="type-casting-and-inference">Type Casting and Inference</h1>

<p>Nim is a statically typed language. As such, each variable has a type associated with it. As seen in the previous example these types are inferred in the <code>const</code>, <code>let</code> and <code>var</code> declarations by the compiler.</p>

<pre><code class="language-nimrod"><span class="c"># These types are inferred.</span>
<span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span> <span class="c"># int</span>
<span class="kd">var</span> <span class="n">y</span> <span class="o">=</span> <span class="s">"foo"</span> <span class="c"># string</span>

<span class="c"># Assigning a value of a different type will result in a compile-time error.</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">y</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r typeinference.nim
<span class="go">typeinference.nim(6, 4) Error: type mismatch: got (string) but expected 'int'</span></code></pre>

<p>You may optionally specify the type after a colon (<code>:</code>). In some cases the compiler will expect you to explicitly cast types, for which two ways are available:</p>

<ul>
  <li>type conversion, whose safety checked by the compiler</li>
  <li>the <code>cast</code> keyword, which is unsafe and should be used only where you know what you are doing, such as in interfacing with C</li>
</ul>

<pre><code class="language-nimrod"><span class="kd">var</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="c"># type conversion</span>

<span class="kd">var</span> <span class="n">y</span> <span class="o">=</span> <span class="s">"Foobar"</span>
<span class="k">proc </span><span class="nf">ffi</span><span class="p">(</span><span class="n">foo</span><span class="p">:</span> <span class="k">ptr</span> <span class="kt">array</span><span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="kt">char</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span> <span class="n">echo</span> <span class="n">repr</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
<span class="n">ffi</span><span class="p">(</span><span class="k">cast</span><span class="o">[</span><span class="k">ptr</span> <span class="kt">array</span><span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="kt">char</span><span class="o">]]</span><span class="p">(</span><span class="k">addr</span> <span class="n">y</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">))</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r typecasting.nim
<span class="go">ref 002C8030 --&gt; ['F', 'o', 'o', 'b', 'a', 'r']</span></code></pre>
;
T;@Öo;;;;	I"/content/primitives/;
T{;{	;U;[0I"ÓF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Primitives</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="primitives">Primitives</h1>

<p>Nim has several primitive types:</p>

<ul>
  <li>signed integers: <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, and <code>int</code>, where <code>int</code> is the same size as a pointer</li>
  <li>unsigned integers are similar with <code>u</code> prepended to the type</li>
  <li>floating points numbers: <code>float32</code>, <code>float64</code>, and <code>float</code>, where <code>float</code> is the processor‚Äôs fastest type</li>
  <li>characters: <code>char</code>, which is basically an alias for uint8</li>
</ul>

<p>To indicate the size of an integer literal, append <code>u</code> or <code>i</code> and the size you‚Äôd like to the end. However, usually this is not necessary.</p>

<p>Integers can also have <code>0[xX]</code>, <code>0o</code>, <code>0[Bb]</code> prepended to indicate a hex, octal, or binary literal, respectively. Underscores are also valid in literals, and can help with readability.</p>

<pre><code class="language-nimrod"><span class="k">let</span>
  <span class="n">a</span><span class="p">:</span> <span class="kt">int8</span> <span class="o">=</span> <span class="mh">0x7F</span> <span class="c"># Works</span>
  <span class="n">b</span><span class="p">:</span> <span class="n">uint8</span> <span class="o">=</span> <span class="mb">0b1111_1111</span> <span class="c"># Works</span>
  <span class="n">d</span> <span class="o">=</span> <span class="mh">0xFF</span> <span class="c"># type is int</span>
  <span class="n">c</span><span class="p">:</span> <span class="n">uint8</span> <span class="o">=</span> <span class="mi">256</span> <span class="c"># Compile time error</span></code></pre>

<p>Precedence rules are the same as in most other languages, but instead of <code>^</code>, <code>&amp;</code>, <code>|</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, the <code>xor</code>, <code>and</code>, <code>or</code>, <code>shr</code>, <code>shl</code> operators are used, respectively.</p>

<pre><code class="language-nimrod"><span class="k">let</span>
  <span class="n">a</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="n">b</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">echo</span> <span class="mi">4</span><span class="o">/</span><span class="mi">2</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r numbers2.nim
<span class="go">2.0</span></code></pre>
<p>Another difference that may be surprising is that the <code>/</code> operator returns a floating point result, even when the operands are integers.  If integer division is needed, the <code>div</code> operator should be used.</p>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"3/pipeline/source/content/content/primitives.md;
TI"0# Primitives

Nim has several primitive types:

* signed integers: `int8`, `int16`, `int32`, `int64`, and `int`, where `int` is the same size as a pointer
* unsigned integers are similar with `u` prepended to the type
* floating points numbers: `float32`, `float64`, and `float`, where `float` is the processor's fastest type
* characters: `char`, which is basically an alias for uint8

To indicate the size of an integer literal, append `u` or `i` and the size you'd like to the end. However, usually this is not necessary.

Integers can also have `0[xX]`, `0o`, `0[Bb]` prepended to indicate a hex, octal, or binary literal, respectively. Underscores are also valid in literals, and can help with readability.

``` nimrod
let
  a: int8 = 0x7F # Works
  b: uint8 = 0b1111_1111 # Works
  d = 0xFF # type is int
  c: uint8 = 256 # Compile time error
```

Precedence rules are the same as in most other languages, but instead of `^`, `&`, `|`, `>>`, `<<`, the `xor`, `and`, `or`, `shr`, `shl` operators are used, respectively.

``` nimrod
let
  a: int = 2
  b: int = 4
echo 4/2
```
``` console
$ nim c -r numbers2.nim
2.0
```
Another difference that may be surprising is that the `/` operator returns a floating point result, even when the operands are integers.  If integer division is needed, the `div` operator should be used.
;
T;U;[0I"Ù
<h1 id="primitives">Primitives</h1>

<p>Nim has several primitive types:</p>

<ul>
  <li>signed integers: <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, and <code>int</code>, where <code>int</code> is the same size as a pointer</li>
  <li>unsigned integers are similar with <code>u</code> prepended to the type</li>
  <li>floating points numbers: <code>float32</code>, <code>float64</code>, and <code>float</code>, where <code>float</code> is the processor‚Äôs fastest type</li>
  <li>characters: <code>char</code>, which is basically an alias for uint8</li>
</ul>

<p>To indicate the size of an integer literal, append <code>u</code> or <code>i</code> and the size you‚Äôd like to the end. However, usually this is not necessary.</p>

<p>Integers can also have <code>0[xX]</code>, <code>0o</code>, <code>0[Bb]</code> prepended to indicate a hex, octal, or binary literal, respectively. Underscores are also valid in literals, and can help with readability.</p>

<pre><code class="language-nimrod"><span class="k">let</span>
  <span class="n">a</span><span class="p">:</span> <span class="kt">int8</span> <span class="o">=</span> <span class="mh">0x7F</span> <span class="c"># Works</span>
  <span class="n">b</span><span class="p">:</span> <span class="n">uint8</span> <span class="o">=</span> <span class="mb">0b1111_1111</span> <span class="c"># Works</span>
  <span class="n">d</span> <span class="o">=</span> <span class="mh">0xFF</span> <span class="c"># type is int</span>
  <span class="n">c</span><span class="p">:</span> <span class="n">uint8</span> <span class="o">=</span> <span class="mi">256</span> <span class="c"># Compile time error</span></code></pre>

<p>Precedence rules are the same as in most other languages, but instead of <code>^</code>, <code>&amp;</code>, <code>|</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, the <code>xor</code>, <code>and</code>, <code>or</code>, <code>shr</code>, <code>shl</code> operators are used, respectively.</p>

<pre><code class="language-nimrod"><span class="k">let</span>
  <span class="n">a</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="n">b</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">echo</span> <span class="mi">4</span><span class="o">/</span><span class="mi">2</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r numbers2.nim
<span class="go">2.0</span></code></pre>
<p>Another difference that may be surprising is that the <code>/</code> operator returns a floating point result, even when the operands are integers.  If integer division is needed, the <code>div</code> operator should be used.</p>
;
T;@ìo;;;;	I"/content/variables/;
T{;{	;U;[0I"≤J<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Variables</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="variables">Variables</h1>

<p>Nim supports three different types of variables, <code>let</code>, <code>var</code>, and <code>const</code>. As with most things, multiple variables can be declared in the same section.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">getAlphabet</span><span class="p">():</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">accm</span> <span class="o">=</span> <span class="s">""</span>
  <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="sc">'a'</span><span class="p">..</span><span class="sc">'z'</span><span class="p">:</span>  <span class="c"># see iterators</span>
    <span class="n">accm</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">accm</span>

<span class="c"># Computed at compilation time</span>
<span class="k">const</span> <span class="n">alphabet</span> <span class="o">=</span> <span class="n">getAlphabet</span><span class="p">()</span>

<span class="c"># Mutable variables</span>
<span class="kd">var</span>
  <span class="n">a</span> <span class="o">=</span> <span class="s">"foo"</span>
  <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="c"># Works fine, initialized to 0</span>
  <span class="n">c</span><span class="p">:</span> <span class="kt">int</span>

<span class="c"># Immutable variables</span>
<span class="k">let</span>
  <span class="n">d</span> <span class="o">=</span> <span class="s">"foo"</span>
  <span class="n">e</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="c"># Compile-time error, must be initialized at creation</span>
  <span class="n">f</span><span class="p">:</span> <span class="kt">float</span>

<span class="c"># Works fine, `a` is mutable</span>
<span class="n">a</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"bar"</span><span class="p">)</span>
<span class="n">b</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">3</span>

<span class="c"># Compile-time error, const cannot be modified at run-time</span>
<span class="n">alphabet</span> <span class="o">=</span> <span class="s">"abc"</span>

<span class="c"># Compile-time error, `d` and `e` are immutable</span>
<span class="n">d</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"bar"</span><span class="p">)</span>
<span class="n">e</span> <span class="o">+=</span> <span class="mi">1</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c --verbosity:2 ./variables.nim
<span class="go">variables.nim(22, 2) Error: 'let' symbol requires an initialization</span>
<span class="go">    f: float</span>
<span class="go">    ^</span></code></pre>

<p>Without <code>--verbosity:2</code> only the error will be shown without the position cursor.</p>

<h2 id="const">Const</h2>
<p>A <code>const</code> variable‚Äôs value will be evaluated at compile-time, so if you inspect the C sources, you‚Äôll see the following line:</p>

<pre><code class="language-c"><span class="n">STRING_LITERAL</span><span class="p">(</span><span class="n">TMP129</span><span class="p">,</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span><span class="p">,</span> <span class="mi">26</span><span class="p">);</span></code></pre>

<p>The only limitation with const is that compile-time evaluation cannot interface with C because there is no compile-time foreign function interface at this time.</p>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"2/pipeline/source/content/content/variables.md;
TI"S# Variables

Nim supports three different types of variables, `let`, `var`, and `const`. As with most things, multiple variables can be declared in the same section.

``` nimrod
proc getAlphabet(): string =
  var accm = ""
  for letter in 'a'..'z':  # see iterators
    accm.add(letter)
  return accm

# Computed at compilation time
const alphabet = getAlphabet()

# Mutable variables
var
  a = "foo"
  b = 0
  # Works fine, initialized to 0
  c: int

# Immutable variables
let
  d = "foo"
  e = 5
  # Compile-time error, must be initialized at creation
  f: float

# Works fine, `a` is mutable
a.add("bar")
b += 1
c = 3

# Compile-time error, const cannot be modified at run-time
alphabet = "abc"

# Compile-time error, `d` and `e` are immutable
d.add("bar")
e += 1
```

``` console
$ nim c --verbosity:2 ./variables.nim
variables.nim(22, 2) Error: 'let' symbol requires an initialization
    f: float
    ^
```

Without `--verbosity:2` only the error will be shown without the position cursor.

## Const
A `const` variable's value will be evaluated at compile-time, so if you inspect the C sources, you'll see the following line:

``` c
STRING_LITERAL(TMP129, "abcdefghijklmnopqrstuvwxyz", 26);
```

The only limitation with const is that compile-time evaluation cannot interface with C because there is no compile-time foreign function interface at this time.
;
T;U;[0I"π<h1 id="variables">Variables</h1>

<p>Nim supports three different types of variables, <code>let</code>, <code>var</code>, and <code>const</code>. As with most things, multiple variables can be declared in the same section.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">getAlphabet</span><span class="p">():</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">accm</span> <span class="o">=</span> <span class="s">""</span>
  <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="sc">'a'</span><span class="p">..</span><span class="sc">'z'</span><span class="p">:</span>  <span class="c"># see iterators</span>
    <span class="n">accm</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">accm</span>

<span class="c"># Computed at compilation time</span>
<span class="k">const</span> <span class="n">alphabet</span> <span class="o">=</span> <span class="n">getAlphabet</span><span class="p">()</span>

<span class="c"># Mutable variables</span>
<span class="kd">var</span>
  <span class="n">a</span> <span class="o">=</span> <span class="s">"foo"</span>
  <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="c"># Works fine, initialized to 0</span>
  <span class="n">c</span><span class="p">:</span> <span class="kt">int</span>

<span class="c"># Immutable variables</span>
<span class="k">let</span>
  <span class="n">d</span> <span class="o">=</span> <span class="s">"foo"</span>
  <span class="n">e</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="c"># Compile-time error, must be initialized at creation</span>
  <span class="n">f</span><span class="p">:</span> <span class="kt">float</span>

<span class="c"># Works fine, `a` is mutable</span>
<span class="n">a</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"bar"</span><span class="p">)</span>
<span class="n">b</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">3</span>

<span class="c"># Compile-time error, const cannot be modified at run-time</span>
<span class="n">alphabet</span> <span class="o">=</span> <span class="s">"abc"</span>

<span class="c"># Compile-time error, `d` and `e` are immutable</span>
<span class="n">d</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"bar"</span><span class="p">)</span>
<span class="n">e</span> <span class="o">+=</span> <span class="mi">1</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c --verbosity:2 ./variables.nim
<span class="go">variables.nim(22, 2) Error: 'let' symbol requires an initialization</span>
<span class="go">    f: float</span>
<span class="go">    ^</span></code></pre>

<p>Without <code>--verbosity:2</code> only the error will be shown without the position cursor.</p>

<h2 id="const">Const</h2>
<p>A <code>const</code> variable‚Äôs value will be evaluated at compile-time, so if you inspect the C sources, you‚Äôll see the following line:</p>

<pre><code class="language-c"><span class="n">STRING_LITERAL</span><span class="p">(</span><span class="n">TMP129</span><span class="p">,</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span><span class="p">,</span> <span class="mi">26</span><span class="p">);</span></code></pre>

<p>The only limitation with const is that compile-time evaluation cannot interface with C because there is no compile-time foreign function interface at this time.</p>
;
T;@°o;;;;	I"/content/bitsets/;
T{;{	;U;[0I"=D<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Bitsets</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="bitsets">Bitsets</h1>

<p>Nim comes with a built in way to build a set of ordinal types. In order for a type to be usable in a bitset, it must be an ordinal and ¬´\texttt{high(T)} &lt; 2^{16}¬ª. For sets of non-ordinal types, see the <a href="http://nim-lang.org/sets.html">sets module</a>, which contains hashsets.</p>

<p>However, best practice is to keep bitset size significantly smaller since each possible element in the set consumes one bit, therefore a bitset of ¬´2^{16}¬ª elements will consume 64KiB.</p>

<p>Bitsets have all the useful operations of mathematical sets:</p>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Description</th>
      <th>Example Code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>a in B</code></td>
      <td>is a an element of B?</td>
      <td><code>'d' in {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>a notin B</code></td>
      <td>is a not an element of B?</td>
      <td><code>40 notin {2..20} </code></td>
    </tr>
    <tr>
      <td><code>A + B</code></td>
      <td>union of A with B</td>
      <td><code>{'a'..'m'} + {'n'..'z'} == {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A - B</code></td>
      <td>relative complement of A in B</td>
      <td><code>{'a'..'z'} - {'b'..'d'} == {'a', 'e'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A + b</code></td>
      <td>add element b to set A</td>
      <td><code>{'b'..'z'} + 'a' == {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A - b</code></td>
      <td>remove element b from set A</td>
      <td><code>{'a'..'z'} - 'a' == {'b'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A * B</code></td>
      <td>intersection of A with B</td>
      <td><code>{'a'..'m'} * {'c'..'z} == {'c'..'m'}</code></td>
    </tr>
    <tr>
      <td><code>A &lt;= B</code></td>
      <td>is A a subset of B?</td>
      <td><code>{'a'..'c'} &lt;= {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A &lt; B</code></td>
      <td>is A a strict subset of B?</td>
      <td><code>{'b'..'c'} &lt; {'a'..'z'}</code></td>
    </tr>
  </tbody>
</table>


    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"0/pipeline/source/content/content/bitsets.md;
TI"1
# Bitsets

Nim comes with a built in way to build a set of ordinal types. In order for a type to be usable in a bitset, it must be an ordinal and <<\texttt{high(T)} < 2^{16}>>. For sets of non-ordinal types, see the [sets module](http://nim-lang.org/sets.html), which contains hashsets.

However, best practice is to keep bitset size significantly smaller since each possible element in the set consumes one bit, therefore a bitset of <<2^{16}>> elements will consume 64KiB.

Bitsets have all the useful operations of mathematical sets:

|Operator     | Description                   | Example Code                                 |
|-------------|-------------------------------|----------------------------------------------|
| `a in B`    | is a an element of B?         | `'d' in {'a'..'z'}`                          |
| `a notin B` | is a not an element of B?     | `40 notin {2..20} `                          |
| `A + B`     | union of A with B             | `{'a'..'m'} + {'n'..'z'} == {'a'..'z'}`      |
| `A - B`     | relative complement of A in B | `{'a'..'z'} - {'b'..'d'} == {'a', 'e'..'z'}` |
| `A + b`     | add element b to set A        | `{'b'..'z'} + 'a' == {'a'..'z'}`             |
| `A - b`     | remove element b from set A   | `{'a'..'z'} - 'a' == {'b'..'z'}`             |
| `A * B`     | intersection of A with B      | `{'a'..'m'} * {'c'..'z} == {'c'..'m'}`       |
| `A <= B`    | is A a subset of B?           | `{'a'..'c'} <= {'a'..'z'}`                   |
| `A < B`     | is A a strict subset of B?    | `{'b'..'c'} < {'a'..'z'}`                    |

;
T;U;[0I"F
<h1 id="bitsets">Bitsets</h1>

<p>Nim comes with a built in way to build a set of ordinal types. In order for a type to be usable in a bitset, it must be an ordinal and ¬´\texttt{high(T)} &lt; 2^{16}¬ª. For sets of non-ordinal types, see the <a href="http://nim-lang.org/sets.html">sets module</a>, which contains hashsets.</p>

<p>However, best practice is to keep bitset size significantly smaller since each possible element in the set consumes one bit, therefore a bitset of ¬´2^{16}¬ª elements will consume 64KiB.</p>

<p>Bitsets have all the useful operations of mathematical sets:</p>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Description</th>
      <th>Example Code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>a in B</code></td>
      <td>is a an element of B?</td>
      <td><code>'d' in {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>a notin B</code></td>
      <td>is a not an element of B?</td>
      <td><code>40 notin {2..20} </code></td>
    </tr>
    <tr>
      <td><code>A + B</code></td>
      <td>union of A with B</td>
      <td><code>{'a'..'m'} + {'n'..'z'} == {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A - B</code></td>
      <td>relative complement of A in B</td>
      <td><code>{'a'..'z'} - {'b'..'d'} == {'a', 'e'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A + b</code></td>
      <td>add element b to set A</td>
      <td><code>{'b'..'z'} + 'a' == {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A - b</code></td>
      <td>remove element b from set A</td>
      <td><code>{'a'..'z'} - 'a' == {'b'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A * B</code></td>
      <td>intersection of A with B</td>
      <td><code>{'a'..'m'} * {'c'..'z} == {'c'..'m'}</code></td>
    </tr>
    <tr>
      <td><code>A &lt;= B</code></td>
      <td>is A a subset of B?</td>
      <td><code>{'a'..'c'} &lt;= {'a'..'z'}</code></td>
    </tr>
    <tr>
      <td><code>A &lt; B</code></td>
      <td>is A a strict subset of B?</td>
      <td><code>{'b'..'c'} &lt; {'a'..'z'}</code></td>
    </tr>
  </tbody>
</table>

;
T;@Øo;;;;	I"/content/procvars/;
T{;{	;U;[0I"%F<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - First Class Functions</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="first-class-functions">First Class Functions</h1>

<p>Nim supports closures as well as passing functions. Two different syntaxes available for closures, proc syntax, which is identical to regular procedure syntax, and ‚Äúdo notation‚Äù, which is a bit shorter.</p>

<pre><code class="language-nimrod"><span class="kn">import</span> <span class="n">sequtils</span>

<span class="k">let</span> <span class="n">powersOfTwo</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">256</span><span class="o">]</span>

<span class="n">echo</span><span class="p">(</span><span class="n">powersOfTwo</span><span class="p">.</span><span class="n">filter</span> <span class="n">do</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span><span class="p">:</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">echo</span> <span class="n">powersOfTwo</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="k">proc</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">bool</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span>

<span class="k">proc </span><span class="nf">greaterThan32</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">bool</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">32</span>
<span class="n">echo</span> <span class="n">powersOfTwo</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">greaterThan32</span><span class="p">)</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r filterclosure.nim
<span class="go">@[64, 128, 256]</span>
<span class="go">@[64, 128, 256]</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"1/pipeline/source/content/content/procvars.md;
TI"G
# First Class Functions

Nim supports closures as well as passing functions. Two different syntaxes available for closures, proc syntax, which is identical to regular procedure syntax, and "do notation", which is a bit shorter.

``` nimrod
import sequtils

let powersOfTwo = @[1, 2, 4, 8, 16, 32, 64, 128, 256]

echo(powersOfTwo.filter do (x: int) -> bool: x > 32)
echo powersOfTwo.filter(proc (x: int): bool = x > 32)

proc greaterThan32(x: int): bool = x > 32
echo powersOfTwo.filter(greaterThan32)
```
``` console
$ nim c -r filterclosure.nim
@[64, 128, 256]
@[64, 128, 256]
```
;
T;U;[0I" 

<h1 id="first-class-functions">First Class Functions</h1>

<p>Nim supports closures as well as passing functions. Two different syntaxes available for closures, proc syntax, which is identical to regular procedure syntax, and ‚Äúdo notation‚Äù, which is a bit shorter.</p>

<pre><code class="language-nimrod"><span class="kn">import</span> <span class="n">sequtils</span>

<span class="k">let</span> <span class="n">powersOfTwo</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">256</span><span class="o">]</span>

<span class="n">echo</span><span class="p">(</span><span class="n">powersOfTwo</span><span class="p">.</span><span class="n">filter</span> <span class="n">do</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span><span class="p">:</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">echo</span> <span class="n">powersOfTwo</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="k">proc</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">bool</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">32</span><span class="p">)</span>

<span class="k">proc </span><span class="nf">greaterThan32</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">bool</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">32</span>
<span class="n">echo</span> <span class="n">powersOfTwo</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">greaterThan32</span><span class="p">)</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r filterclosure.nim
<span class="go">@[64, 128, 256]</span>
<span class="go">@[64, 128, 256]</span></code></pre>
;
T;@Ωo;;;;	I"/content/getting_started/;
T{;{	;U;[0I"¶C<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Getting Started</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="getting-started">Getting Started</h1>
<p>When installing Nim, you have two options: downloading a copy directly from git, or downloading a prepackaged distribution from the website</p>

<h2 id="downloading-a-nim-distribution">Downloading a Nim Distribution</h2>
<p>To get started with Nim, head over to the <a href="http://nim-lang.org/download.html">downloads page</a> and download the version you‚Äôd like.</p>

<p>The Windows distribution comes with the MinGW compiler, which is recommended, but if you‚Äôd like to use your own compiler, download the version without MinGW. If you get an error like <code>Error: unhandled exception: The system cannot find the file specified.</code>, then make sure that the C compiler is on your path.</p>

<p>On Mac and Linux, it is recommended to use either GCC or Clang.</p>

<p>Once you have downloaded the appropriate distribution and extracted the files somewhere convenient, feel free to place the <code>bin</code> directory in the path for easier access.</p>

<h2 id="downloading-from-git">Downloading from Git</h2>
<p>To install Nim from git, ensure that you have gcc installed on Windows, Linux, and BSDs and clang on Mac. Afterwards, run the following series of commands to download and bootstrap Nim:</p>

<pre><code class="language-console"><span class="gp">$</span> git clone -b master git://github.com/Araq/Nim.git
<span class="gp">$</span> <span class="nb">cd</span> Nim
<span class="gp">$</span> git clone --depth <span class="m">1</span> git://github.com/nim-lang/csources
<span class="gp">$</span> <span class="nb">cd</span> csources
<span class="gp">$</span> sh build.sh <span class="c1"># Replace with build.bat on windows</span>
<span class="gp">$</span> <span class="nb">cd</span> ..
<span class="gp">$</span> bin/nim c koch
<span class="gp">$</span> ./koch boot -d:release</code></pre>

<p>Once compiled, you may want to add the <code>bin</code> directory to your path for easy access.</p>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"8/pipeline/source/content/content/getting_started.md;
TI"á# Getting Started
When installing Nim, you have two options: downloading a copy directly from git, or downloading a prepackaged distribution from the website

## Downloading a Nim Distribution
To get started with Nim, head over to the [downloads page](http://nim-lang.org/download.html) and download the version you'd like.

The Windows distribution comes with the MinGW compiler, which is recommended, but if you'd like to use your own compiler, download the version without MinGW. If you get an error like `Error: unhandled exception: The system cannot find the file specified.`, then make sure that the C compiler is on your path.

On Mac and Linux, it is recommended to use either GCC or Clang.

Once you have downloaded the appropriate distribution and extracted the files somewhere convenient, feel free to place the `bin` directory in the path for easier access.

## Downloading from Git
To install Nim from git, ensure that you have gcc installed on Windows, Linux, and BSDs and clang on Mac. Afterwards, run the following series of commands to download and bootstrap Nim:

```console
$ git clone -b master git://github.com/Araq/Nim.git
$ cd Nim
$ git clone --depth 1 git://github.com/nim-lang/csources
$ cd csources
$ sh build.sh # Replace with build.bat on windows
$ cd ..
$ bin/nim c koch
$ ./koch boot -d:release
```

Once compiled, you may want to add the `bin` directory to your path for easy access.
;
T;U;[0I"ß<h1 id="getting-started">Getting Started</h1>
<p>When installing Nim, you have two options: downloading a copy directly from git, or downloading a prepackaged distribution from the website</p>

<h2 id="downloading-a-nim-distribution">Downloading a Nim Distribution</h2>
<p>To get started with Nim, head over to the <a href="http://nim-lang.org/download.html">downloads page</a> and download the version you‚Äôd like.</p>

<p>The Windows distribution comes with the MinGW compiler, which is recommended, but if you‚Äôd like to use your own compiler, download the version without MinGW. If you get an error like <code>Error: unhandled exception: The system cannot find the file specified.</code>, then make sure that the C compiler is on your path.</p>

<p>On Mac and Linux, it is recommended to use either GCC or Clang.</p>

<p>Once you have downloaded the appropriate distribution and extracted the files somewhere convenient, feel free to place the <code>bin</code> directory in the path for easier access.</p>

<h2 id="downloading-from-git">Downloading from Git</h2>
<p>To install Nim from git, ensure that you have gcc installed on Windows, Linux, and BSDs and clang on Mac. Afterwards, run the following series of commands to download and bootstrap Nim:</p>

<pre><code class="language-console"><span class="gp">$</span> git clone -b master git://github.com/Araq/Nim.git
<span class="gp">$</span> <span class="nb">cd</span> Nim
<span class="gp">$</span> git clone --depth <span class="m">1</span> git://github.com/nim-lang/csources
<span class="gp">$</span> <span class="nb">cd</span> csources
<span class="gp">$</span> sh build.sh <span class="c1"># Replace with build.bat on windows</span>
<span class="gp">$</span> <span class="nb">cd</span> ..
<span class="gp">$</span> bin/nim c koch
<span class="gp">$</span> ./koch boot -d:release</code></pre>

<p>Once compiled, you may want to add the <code>bin</code> directory to your path for easy access.</p>
;
T;@Ào;;;;	I"/content/seqs/;
T{;{	;U;[0I"ÖX<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Seqs</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="seqs">Seqs</h1>

<p>Seqs, abbreviated from ‚Äúsequence‚Äù, provide dynamically expandable storage.</p>

<p>There are two ways to create seqs, with the <code>@</code> operator and with the <code>newSeq[T](n: int)</code> method. Once a seq is created, it can be modified using the <code>add(item: T)</code>, <code>delete(idx: int)</code>. The length of a seq can be found through <code>len: int</code>, and the maximum index through <code>high: int</code>. The standard <code>items: T</code> and <code>pairs: tuple[i: int, v: T]</code> iterators are also available.</p>

<pre><code class="language-nimrod"><span class="kd">var</span>
  <span class="n">a</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
  <span class="n">b</span> <span class="o">=</span> <span class="n">newSeq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
  <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">4</span><span class="p">..</span><span class="mi">100</span><span class="p">:</span>
  <span class="n">b</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span>

<span class="n">b</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c"># takes O(n) time</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">b</span>  <span class="c"># Same as original b</span></code></pre>

<h2 id="immutability">Immutability</h2>

<p>Sequences are dynamically allocated (i.e. allocated on the heap, not the stack), but they are immutable unless marked as <code>var</code>. That means</p>

<pre><code class="language-nimrod"><span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">a</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></code></pre>

<p>will fail to compile because <code>a</code> cannot be assigned to. However,</p>

<pre><code class="language-nimrod"><span class="kd">var</span> <span class="n">b</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">b</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></code></pre>

<p>will work without any problems. Sequences passed as ‚Äúargument by value‚Äù are not modifiable. For example, the following will fail to compile.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">doSomething</span><span class="p">(</span><span class="n">mySeq</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">mySeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>  <span class="c"># this is a compile-time error</span>
<span class="kd">var</span> <span class="n">testSeq</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">doSomething</span><span class="p">(</span><span class="n">testSeq</span><span class="p">)</span></code></pre>

<p><code>seq</code> arguments can be mutable if they are passed as ‚Äúargument by reference‚Äù, ie. the parameter is annotated with the <code>var</code> or <code>ref</code>:</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">foo</span><span class="p">(</span><span class="n">mySeq</span><span class="p">:</span> <span class="kd">var</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">mySeq</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">=</span> <span class="mi">999</span>

<span class="kd">var</span> <span class="n">thisSeq</span> <span class="o">=</span> <span class="n">newSeq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">foo</span><span class="p">(</span><span class="n">thisSeq</span><span class="p">)</span>

<span class="n">assert</span> <span class="n">thisSeq</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">==</span> <span class="mi">999</span></code></pre>

<p>You can copy a sequence passed as ‚Äúargument by value‚Äù and modify the copy:</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">doSomething</span><span class="p">(</span><span class="n">mySeq</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">varMySeq</span> <span class="o">=</span> <span class="n">mySeq</span>  <span class="c"># copy the seq</span>
  <span class="n">varMySeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">999</span>
  <span class="n">assert</span> <span class="n">varMySeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">999</span>
<span class="kd">var</span> <span class="n">testSeq</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">doSomething</span><span class="p">(</span><span class="n">testSeq</span><span class="p">)</span>
<span class="n">assert</span> <span class="n">testSeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"-/pipeline/source/content/content/seqs.md;
TI"
# Seqs

Seqs, abbreviated from "sequence", provide dynamically expandable storage.

There are two ways to create seqs, with the `@` operator and with the `newSeq[T](n: int)` method. Once a seq is created, it can be modified using the `add(item: T)`, `delete(idx: int)`. The length of a seq can be found through `len: int`, and the maximum index through `high: int`. The standard `items: T` and `pairs: tuple[i: int, v: T]` iterators are also available.

``` nimrod
var
  a = @[1, 2, 3]
  b = newSeq[int](3)

for i, v in a:
  b[i] = v*v

for i in 4..100:
  b.add(i * i)

b.delete(0)  # takes O(n) time
b = a[0] & b  # Same as original b
```


## Immutability

Sequences are dynamically allocated (i.e. allocated on the heap, not the stack), but they are immutable unless marked as `var`. That means

``` nimrod
let a = @[1, 2, 3]
a.add(4)
```

will fail to compile because `a` cannot be assigned to. However, 

``` nimrod
var b = @[1, 2, 3]
b.add(4)
```

will work without any problems. Sequences passed as "argument by value" are not modifiable. For example, the following will fail to compile.

``` nimrod
proc doSomething(mySeq: seq[int]) =
  mySeq[0] = 2  # this is a compile-time error
var testSeq = @[1, 2, 3]
doSomething(testSeq)
```

`seq` arguments can be mutable if they are passed as "argument by reference", ie. the parameter is annotated with the `var` or `ref`:

``` nimrod
proc foo(mySeq: var seq[int]) =
  mySeq[9] = 999

var thisSeq = newSeq[int](10)
foo(thisSeq)

assert thisSeq[9] == 999
```

You can copy a sequence passed as "argument by value" and modify the copy:

``` nimrod
proc doSomething(mySeq: seq[int]) =
  var varMySeq = mySeq  # copy the seq
  varMySeq[0] = 999
  assert varMySeq[0] == 999
var testSeq = @[1, 2, 3]
doSomething(testSeq)
assert testSeq[0] == 1
```
;
T;U;[0I"ë
<h1 id="seqs">Seqs</h1>

<p>Seqs, abbreviated from ‚Äúsequence‚Äù, provide dynamically expandable storage.</p>

<p>There are two ways to create seqs, with the <code>@</code> operator and with the <code>newSeq[T](n: int)</code> method. Once a seq is created, it can be modified using the <code>add(item: T)</code>, <code>delete(idx: int)</code>. The length of a seq can be found through <code>len: int</code>, and the maximum index through <code>high: int</code>. The standard <code>items: T</code> and <code>pairs: tuple[i: int, v: T]</code> iterators are also available.</p>

<pre><code class="language-nimrod"><span class="kd">var</span>
  <span class="n">a</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
  <span class="n">b</span> <span class="o">=</span> <span class="n">newSeq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
  <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">4</span><span class="p">..</span><span class="mi">100</span><span class="p">:</span>
  <span class="n">b</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span>

<span class="n">b</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c"># takes O(n) time</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">b</span>  <span class="c"># Same as original b</span></code></pre>

<h2 id="immutability">Immutability</h2>

<p>Sequences are dynamically allocated (i.e. allocated on the heap, not the stack), but they are immutable unless marked as <code>var</code>. That means</p>

<pre><code class="language-nimrod"><span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">a</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></code></pre>

<p>will fail to compile because <code>a</code> cannot be assigned to. However,</p>

<pre><code class="language-nimrod"><span class="kd">var</span> <span class="n">b</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">b</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></code></pre>

<p>will work without any problems. Sequences passed as ‚Äúargument by value‚Äù are not modifiable. For example, the following will fail to compile.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">doSomething</span><span class="p">(</span><span class="n">mySeq</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">mySeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>  <span class="c"># this is a compile-time error</span>
<span class="kd">var</span> <span class="n">testSeq</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">doSomething</span><span class="p">(</span><span class="n">testSeq</span><span class="p">)</span></code></pre>

<p><code>seq</code> arguments can be mutable if they are passed as ‚Äúargument by reference‚Äù, ie. the parameter is annotated with the <code>var</code> or <code>ref</code>:</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">foo</span><span class="p">(</span><span class="n">mySeq</span><span class="p">:</span> <span class="kd">var</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">mySeq</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">=</span> <span class="mi">999</span>

<span class="kd">var</span> <span class="n">thisSeq</span> <span class="o">=</span> <span class="n">newSeq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">foo</span><span class="p">(</span><span class="n">thisSeq</span><span class="p">)</span>

<span class="n">assert</span> <span class="n">thisSeq</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">==</span> <span class="mi">999</span></code></pre>

<p>You can copy a sequence passed as ‚Äúargument by value‚Äù and modify the copy:</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">doSomething</span><span class="p">(</span><span class="n">mySeq</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">int</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">varMySeq</span> <span class="o">=</span> <span class="n">mySeq</span>  <span class="c"># copy the seq</span>
  <span class="n">varMySeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">999</span>
  <span class="n">assert</span> <span class="n">varMySeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">999</span>
<span class="kd">var</span> <span class="n">testSeq</span> <span class="o">=</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">doSomething</span><span class="p">(</span><span class="n">testSeq</span><span class="p">)</span>
<span class="n">assert</span> <span class="n">testSeq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span></code></pre>
;
T;@Ÿo;;;;	I"/content/types/enums/;
T{;{	;U;[0I"´N<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Enums</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="enums">Enums</h1>
<p>Enums in Nim are like enums in C, but are type-checked. There are no anonymous enums in Nim.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">CompassDirections</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">cdNorth</span><span class="p">,</span> <span class="n">cdEast</span><span class="p">,</span> <span class="n">cdSouth</span><span class="p">,</span> <span class="n">cdWest</span>

  <span class="n">Colors</span> <span class="p">{.</span><span class="n">pure</span><span class="p">.}</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">Red</span> <span class="o">=</span> <span class="s">"FF0000"</span><span class="p">,</span> <span class="n">Green</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"00FF00"</span><span class="p">),</span> <span class="n">Blue</span> <span class="o">=</span> <span class="s">"0000FF"</span>

  <span class="n">Signals</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">sigQuit</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">sigAbort</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">sigKill</span> <span class="o">=</span> <span class="mi">9</span></code></pre>
<p>Notice that each element in <code>CompassDirections</code> is prepended with <code>cd</code> to avoid name conflicts since references to the enum value do not need to be qualified. The <code>{.pure.}</code> pragma that <code>Colors</code> has requires that all references to <code>Colors</code>‚Äôs values be qualified, therefore making a prefix unnecessary.</p>

<p>Enums can be given custom values and stringify values, as shown by <code>Colors</code> and <code>Signals</code>.</p>

<h2 id="ordinals">Ordinals</h2>

<p>While enums can also have disjoint values, it should not be used for any other reason than compatibility with C because it breaks the idea that enums are ordinal.</p>

<pre><code class="language-nimrod"><span class="k">for</span> <span class="n">direction</span> <span class="ow">in</span> <span class="n">ord</span><span class="p">(</span><span class="n">low</span><span class="p">(</span><span class="n">CompassDirections</span><span class="p">))..</span>
                 <span class="n">ord</span><span class="p">(</span><span class="n">high</span><span class="p">(</span><span class="n">CompassDirections</span><span class="p">)):</span>
  <span class="n">echo</span> <span class="n">CompassDirections</span><span class="p">(</span><span class="n">direction</span><span class="p">),</span> <span class="s">" ord: "</span><span class="p">,</span> <span class="n">direction</span>

<span class="kd">var</span> <span class="n">ordinal</span> <span class="o">=</span> <span class="n">low</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
<span class="n">inc</span> <span class="n">ordinal</span>
<span class="n">dec</span> <span class="n">ordinal</span>
<span class="n">echo</span> <span class="n">high</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r enums.nim
<span class="go">cdNorth ord: 0</span>
<span class="go">cdEast ord: 1</span>
<span class="go">cdSouth ord: 2</span>
<span class="go">cdWest ord: 3</span>
<span class="go">3</span>
<span class="go">ÔøΩ</span></code></pre>

<p>Because enums are ordinals, they have the <code>low</code>, <code>high</code>, <code>inc</code>, <code>dec</code>, and <code>ord</code> methods defined, where</p>

<ul>
  <li>
<code>low</code> gives the lowest possible value</li>
  <li>
<code>high</code> give the highest possible value</li>
  <li>
<code>inc</code> increments</li>
  <li>
<code>dec</code> decrements</li>
  <li>
<code>ord</code> gives the integer value of the enum</li>
  <li>
<code>CompassDirections</code> is a cast that gives an enum from an integer</li>
</ul>

<p>It is also possible to iterate through all possible values of ordinal enums, either as shown above, or <code>cdNorth..cdWest</code>, which is equivalent.</p>

<pre><code class="language-nimrod"><span class="k">when</span> <span class="kp">false</span><span class="p">:</span>
  <span class="kd">var</span> <span class="n">nonOrdinal</span> <span class="o">=</span> <span class="n">sigQuit</span>
  <span class="n">inc</span> <span class="n">nonOrdinal</span>
  <span class="n">dec</span> <span class="n">nonOrdinal</span></code></pre>

<p><code>Signals</code> is not an ordinal type, and so doesn‚Äôt have the <code>inc</code> and <code>dec</code> procedures.</p>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"4/pipeline/source/content/content/types/enums.md;
TI"h# Enums
Enums in Nim are like enums in C, but are type-checked. There are no anonymous enums in Nim.

``` nimrod
type
  CompassDirections = enum
    cdNorth, cdEast, cdSouth, cdWest

  Colors {.pure.} = enum
    Red = "FF0000", Green = (1, "00FF00"), Blue = "0000FF"

  Signals = enum
    sigQuit = 3, sigAbort = 6, sigKill = 9
```
Notice that each element in `CompassDirections` is prepended with `cd` to avoid name conflicts since references to the enum value do not need to be qualified. The `{.pure.}` pragma that `Colors` has requires that all references to `Colors`'s values be qualified, therefore making a prefix unnecessary.

Enums can be given custom values and stringify values, as shown by `Colors` and `Signals`.

## Ordinals

While enums can also have disjoint values, it should not be used for any other reason than compatibility with C because it breaks the idea that enums are ordinal.

``` nimrod
for direction in ord(low(CompassDirections))..
                 ord(high(CompassDirections)):
  echo CompassDirections(direction), " ord: ", direction

var ordinal = low(int)
inc ordinal
dec ordinal
echo high(char)
```
```console
$ nim c -r enums.nim
cdNorth ord: 0
cdEast ord: 1
cdSouth ord: 2
cdWest ord: 3
3
ÔøΩ
```

Because enums are ordinals, they have the `low`, `high`, `inc`, `dec`, and `ord` methods defined, where

 - `low` gives the lowest possible value
 - `high` give the highest possible value
 - `inc` increments
 - `dec` decrements
 - `ord` gives the integer value of the enum
 - `CompassDirections` is a cast that gives an enum from an integer

It is also possible to iterate through all possible values of ordinal enums, either as shown above, or `cdNorth..cdWest`, which is equivalent.


``` nimrod
when false:
  var nonOrdinal = sigQuit
  inc nonOrdinal
  dec nonOrdinal
```

`Signals` is not an ordinal type, and so doesn't have the `inc` and `dec` procedures.;
T;U;[0I"∂<h1 id="enums">Enums</h1>
<p>Enums in Nim are like enums in C, but are type-checked. There are no anonymous enums in Nim.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">CompassDirections</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">cdNorth</span><span class="p">,</span> <span class="n">cdEast</span><span class="p">,</span> <span class="n">cdSouth</span><span class="p">,</span> <span class="n">cdWest</span>

  <span class="n">Colors</span> <span class="p">{.</span><span class="n">pure</span><span class="p">.}</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">Red</span> <span class="o">=</span> <span class="s">"FF0000"</span><span class="p">,</span> <span class="n">Green</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"00FF00"</span><span class="p">),</span> <span class="n">Blue</span> <span class="o">=</span> <span class="s">"0000FF"</span>

  <span class="n">Signals</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">sigQuit</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">sigAbort</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">sigKill</span> <span class="o">=</span> <span class="mi">9</span></code></pre>
<p>Notice that each element in <code>CompassDirections</code> is prepended with <code>cd</code> to avoid name conflicts since references to the enum value do not need to be qualified. The <code>{.pure.}</code> pragma that <code>Colors</code> has requires that all references to <code>Colors</code>‚Äôs values be qualified, therefore making a prefix unnecessary.</p>

<p>Enums can be given custom values and stringify values, as shown by <code>Colors</code> and <code>Signals</code>.</p>

<h2 id="ordinals">Ordinals</h2>

<p>While enums can also have disjoint values, it should not be used for any other reason than compatibility with C because it breaks the idea that enums are ordinal.</p>

<pre><code class="language-nimrod"><span class="k">for</span> <span class="n">direction</span> <span class="ow">in</span> <span class="n">ord</span><span class="p">(</span><span class="n">low</span><span class="p">(</span><span class="n">CompassDirections</span><span class="p">))..</span>
                 <span class="n">ord</span><span class="p">(</span><span class="n">high</span><span class="p">(</span><span class="n">CompassDirections</span><span class="p">)):</span>
  <span class="n">echo</span> <span class="n">CompassDirections</span><span class="p">(</span><span class="n">direction</span><span class="p">),</span> <span class="s">" ord: "</span><span class="p">,</span> <span class="n">direction</span>

<span class="kd">var</span> <span class="n">ordinal</span> <span class="o">=</span> <span class="n">low</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
<span class="n">inc</span> <span class="n">ordinal</span>
<span class="n">dec</span> <span class="n">ordinal</span>
<span class="n">echo</span> <span class="n">high</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r enums.nim
<span class="go">cdNorth ord: 0</span>
<span class="go">cdEast ord: 1</span>
<span class="go">cdSouth ord: 2</span>
<span class="go">cdWest ord: 3</span>
<span class="go">3</span>
<span class="go">ÔøΩ</span></code></pre>

<p>Because enums are ordinals, they have the <code>low</code>, <code>high</code>, <code>inc</code>, <code>dec</code>, and <code>ord</code> methods defined, where</p>

<ul>
  <li>
<code>low</code> gives the lowest possible value</li>
  <li>
<code>high</code> give the highest possible value</li>
  <li>
<code>inc</code> increments</li>
  <li>
<code>dec</code> decrements</li>
  <li>
<code>ord</code> gives the integer value of the enum</li>
  <li>
<code>CompassDirections</code> is a cast that gives an enum from an integer</li>
</ul>

<p>It is also possible to iterate through all possible values of ordinal enums, either as shown above, or <code>cdNorth..cdWest</code>, which is equivalent.</p>

<pre><code class="language-nimrod"><span class="k">when</span> <span class="kp">false</span><span class="p">:</span>
  <span class="kd">var</span> <span class="n">nonOrdinal</span> <span class="o">=</span> <span class="n">sigQuit</span>
  <span class="n">inc</span> <span class="n">nonOrdinal</span>
  <span class="n">dec</span> <span class="n">nonOrdinal</span></code></pre>

<p><code>Signals</code> is not an ordinal type, and so doesn‚Äôt have the <code>inc</code> and <code>dec</code> procedures.</p>
;
T;@Áo;;;;	I"/content/types/range/;
T{;{	;U;[0I"∫C<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Range Types</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="range-types">Range Types</h1>

<p>Range types that guarantee a value will always be within a given range also exist. Whenever possible, out-of-bounds values will fail at compile-time, otherwise they will fail at run-time.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">TwoDigits</span><span class="o">*</span> <span class="o">=</span> <span class="kt">range</span><span class="o">[</span><span class="mf">10</span><span class="p">..</span><span class="mi">99</span><span class="o">]</span>

<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">var</span> <span class="n">b</span><span class="p">:</span> <span class="n">TwoDigits</span> <span class="o">=</span> <span class="mi">99</span> <span class="o">+</span> <span class="n">a</span>  <span class="c"># Fails at run-time</span>
<span class="k">let</span> <span class="n">c</span><span class="p">:</span> <span class="n">TwoDigits</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c"># Fails at compile-time</span></code></pre>

<p>Also note that range types also work on any other ordinal type, so a range over an enum is also valid:</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">MyEnum</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span>
  <span class="n">BToD</span> <span class="o">=</span> <span class="kt">range</span><span class="o">[</span><span class="n">B</span><span class="p">..</span><span class="n">D</span><span class="o">]</span>

<span class="k">let</span> <span class="n">value</span><span class="p">:</span> <span class="n">BToD</span> <span class="o">=</span> <span class="n">C</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"4/pipeline/source/content/content/types/range.md;
TI"/# Range Types

Range types that guarantee a value will always be within a given range also exist. Whenever possible, out-of-bounds values will fail at compile-time, otherwise they will fail at run-time.

``` nimrod
type
  TwoDigits* = range[10..99]

let a = 2
var b: TwoDigits = 99 + a  # Fails at run-time
let c: TwoDigits = 100  # Fails at compile-time
```

Also note that range types also work on any other ordinal type, so a range over an enum is also valid:

``` nimrod
type
  MyEnum = enum
    A, B, C, D, E
  BToD = range[B..D]

let value: BToD = C
```;
T;U;[0I"ø<h1 id="range-types">Range Types</h1>

<p>Range types that guarantee a value will always be within a given range also exist. Whenever possible, out-of-bounds values will fail at compile-time, otherwise they will fail at run-time.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">TwoDigits</span><span class="o">*</span> <span class="o">=</span> <span class="kt">range</span><span class="o">[</span><span class="mf">10</span><span class="p">..</span><span class="mi">99</span><span class="o">]</span>

<span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">var</span> <span class="n">b</span><span class="p">:</span> <span class="n">TwoDigits</span> <span class="o">=</span> <span class="mi">99</span> <span class="o">+</span> <span class="n">a</span>  <span class="c"># Fails at run-time</span>
<span class="k">let</span> <span class="n">c</span><span class="p">:</span> <span class="n">TwoDigits</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c"># Fails at compile-time</span></code></pre>

<p>Also note that range types also work on any other ordinal type, so a range over an enum is also valid:</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">MyEnum</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span>
  <span class="n">BToD</span> <span class="o">=</span> <span class="kt">range</span><span class="o">[</span><span class="n">B</span><span class="p">..</span><span class="n">D</span><span class="o">]</span>

<span class="k">let</span> <span class="n">value</span><span class="p">:</span> <span class="n">BToD</span> <span class="o">=</span> <span class="n">C</span></code></pre>
;
T;@ıo;;;;	I"/content/types/objects/;
T{;{	;U;[0I"V<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Objects</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="objects">Objects</h1>

<p>In Nim, objects are like structs from C family languages and define a grouping of fields. They are by default traced by the garbage collector, so there is no need to explicitly free them when allocated.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Animal</span><span class="o">*</span> <span class="o">=</span> <span class="k">object</span>
    <span class="n">name</span><span class="o">*</span><span class="p">,</span> <span class="n">species</span><span class="o">*</span><span class="p">:</span> <span class="kt">string</span>
    <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>

<span class="k">proc </span><span class="nf">sleep</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="kd">var</span> <span class="n">Animal</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">a</span><span class="p">.</span><span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">proc </span><span class="nf">dead</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">bool</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span>

<span class="kd">var</span> <span class="n">carl</span><span class="p">:</span> <span class="n">Animal</span>
<span class="n">carl</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="n">name</span> <span class="p">:</span> <span class="s">"Carl"</span><span class="p">,</span>
              <span class="n">species</span> <span class="p">:</span> <span class="s">"L. glama"</span><span class="p">,</span>
              <span class="n">age</span> <span class="p">:</span> <span class="mi">12</span><span class="p">)</span>

<span class="k">let</span> <span class="n">joe</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="n">name</span> <span class="p">:</span> <span class="s">"Joe"</span><span class="p">,</span>
                 <span class="n">species</span> <span class="p">:</span> <span class="s">"H. sapiens"</span><span class="p">,</span>
                 <span class="n">age</span> <span class="p">:</span> <span class="mi">23</span><span class="p">)</span>

<span class="n">assert</span><span class="p">(</span><span class="ow">not</span> <span class="n">carl</span><span class="p">.</span><span class="n">dead</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="mi">10</span><span class="p">:</span>
  <span class="n">carl</span><span class="p">.</span><span class="n">sleep</span><span class="p">()</span>
<span class="n">assert</span> <span class="n">carl</span><span class="p">.</span><span class="n">dead</span></code></pre>

<p>Object types are declared in a type section, as usual. They can be exported, and individual fields can also be exported. Fields can be safely exported without violating encapsulation because call syntax is equivalent between them.</p>

<p>Initially, <code>carl</code> is created on the stack and initialized to zeros, so its value is <code>[name = nil, species = nil, age = 0]</code>. It is mutable, so that means that the contents of <code>carl</code> can be changed. This also means it can be passed to functions that require a variable parameter, like <code>sleep()</code>, which can modify its value.</p>

<p><code>joe</code> is also created on the stack, but it‚Äôs contents are immutable and can not be changed. Attempting to do so, say through <code>joe.age = 57</code>, will fail with an error at compile time.</p>

<pre><code class="language-nimrod"><span class="k">let</span> <span class="n">mittens</span><span class="p">:</span> <span class="k">ref</span> <span class="n">Animal</span> <span class="o">=</span> <span class="n">new</span><span class="p">(</span><span class="n">Animal</span><span class="p">)</span>

<span class="n">mittens</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Mittens"</span>
<span class="n">mittens</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="s">"P. leo"</span>
<span class="n">mittens</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">6</span>

<span class="n">mittens</span><span class="p">.</span><span class="n">sleep</span><span class="p">()</span></code></pre>

<p><code>mittens</code> is a reference to an object allocated on the heap. The value of <code>mittens</code> cannot be changed, so <code>mittens</code> can never point to anything else, but the value that <code>mittens</code> is pointing at can and is changed from the default initialization value of zeros. Its mutability also means that <code>mittens</code> can be passed to functions that require a variable parameter.</p>

<p>You might ask whether there is a more concise way of initializing  reference types, and there is if you give the reference type a name:</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">AnimalRef</span><span class="o">*</span> <span class="o">=</span> <span class="k">ref</span> <span class="n">Animal</span>

<span class="k">let</span> <span class="n">spot</span> <span class="o">=</span> <span class="n">AnimalRef</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Spot"</span><span class="p">,</span>
                   <span class="n">species</span><span class="p">:</span> <span class="s">"C. lupus"</span><span class="p">,</span>
                   <span class="n">age</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span></code></pre>

<p>In many cases it is only wanted to have the object be a reference type, which is possible by declaring it as a <code>ref object</code>.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Thing</span><span class="o">*</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span>
    <span class="n">positionX</span><span class="o">*</span><span class="p">,</span> <span class="n">positionY</span><span class="o">*</span><span class="p">:</span> <span class="kt">int</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"6/pipeline/source/content/content/types/objects.md;
TI"`	# Objects

In Nim, objects are like structs from C family languages and define a grouping of fields. They are by default traced by the garbage collector, so there is no need to explicitly free them when allocated.

``` nimrod
type
  Animal* = object
    name*, species*: string
    age: int

proc sleep*(a: var Animal) =
  a.age += 1

proc dead*(a: Animal): bool =
  result = a.age > 20

var carl: Animal
carl = Animal(name : "Carl",
              species : "L. glama",
              age : 12)

let joe = Animal(name : "Joe",
                 species : "H. sapiens",
                 age : 23)

assert(not carl.dead)
for i in 0..10:
  carl.sleep()
assert carl.dead
```

Object types are declared in a type section, as usual. They can be exported, and individual fields can also be exported. Fields can be safely exported without violating encapsulation because call syntax is equivalent between them.

Initially, `carl` is created on the stack and initialized to zeros, so its value is `[name = nil, species = nil, age = 0]`. It is mutable, so that means that the contents of `carl` can be changed. This also means it can be passed to functions that require a variable parameter, like `sleep()`, which can modify its value.

`joe` is also created on the stack, but it's contents are immutable and can not be changed. Attempting to do so, say through `joe.age = 57`, will fail with an error at compile time.

``` nimrod
let mittens: ref Animal = new(Animal)

mittens.name = "Mittens"
mittens.species = "P. leo"
mittens.age = 6

mittens.sleep()
```

`mittens` is a reference to an object allocated on the heap. The value of `mittens` cannot be changed, so `mittens` can never point to anything else, but the value that `mittens` is pointing at can and is changed from the default initialization value of zeros. Its mutability also means that `mittens` can be passed to functions that require a variable parameter.

You might ask whether there is a more concise way of initializing  reference types, and there is if you give the reference type a name:

``` nimrod
type
  AnimalRef* = ref Animal

let spot = AnimalRef(name: "Spot",
                   species: "C. lupus",
                   age: 1)
```

In many cases it is only wanted to have the object be a reference type, which is possible by declaring it as a `ref object`.

``` nimrod
type
  Thing* = ref object
    positionX*, positionY*: int
```
;
T;U;[0I"!<h1 id="objects">Objects</h1>

<p>In Nim, objects are like structs from C family languages and define a grouping of fields. They are by default traced by the garbage collector, so there is no need to explicitly free them when allocated.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Animal</span><span class="o">*</span> <span class="o">=</span> <span class="k">object</span>
    <span class="n">name</span><span class="o">*</span><span class="p">,</span> <span class="n">species</span><span class="o">*</span><span class="p">:</span> <span class="kt">string</span>
    <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>

<span class="k">proc </span><span class="nf">sleep</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="kd">var</span> <span class="n">Animal</span><span class="p">)</span> <span class="o">=</span>
  <span class="n">a</span><span class="p">.</span><span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">proc </span><span class="nf">dead</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">bool</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span>

<span class="kd">var</span> <span class="n">carl</span><span class="p">:</span> <span class="n">Animal</span>
<span class="n">carl</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="n">name</span> <span class="p">:</span> <span class="s">"Carl"</span><span class="p">,</span>
              <span class="n">species</span> <span class="p">:</span> <span class="s">"L. glama"</span><span class="p">,</span>
              <span class="n">age</span> <span class="p">:</span> <span class="mi">12</span><span class="p">)</span>

<span class="k">let</span> <span class="n">joe</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="n">name</span> <span class="p">:</span> <span class="s">"Joe"</span><span class="p">,</span>
                 <span class="n">species</span> <span class="p">:</span> <span class="s">"H. sapiens"</span><span class="p">,</span>
                 <span class="n">age</span> <span class="p">:</span> <span class="mi">23</span><span class="p">)</span>

<span class="n">assert</span><span class="p">(</span><span class="ow">not</span> <span class="n">carl</span><span class="p">.</span><span class="n">dead</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="mi">10</span><span class="p">:</span>
  <span class="n">carl</span><span class="p">.</span><span class="n">sleep</span><span class="p">()</span>
<span class="n">assert</span> <span class="n">carl</span><span class="p">.</span><span class="n">dead</span></code></pre>

<p>Object types are declared in a type section, as usual. They can be exported, and individual fields can also be exported. Fields can be safely exported without violating encapsulation because call syntax is equivalent between them.</p>

<p>Initially, <code>carl</code> is created on the stack and initialized to zeros, so its value is <code>[name = nil, species = nil, age = 0]</code>. It is mutable, so that means that the contents of <code>carl</code> can be changed. This also means it can be passed to functions that require a variable parameter, like <code>sleep()</code>, which can modify its value.</p>

<p><code>joe</code> is also created on the stack, but it‚Äôs contents are immutable and can not be changed. Attempting to do so, say through <code>joe.age = 57</code>, will fail with an error at compile time.</p>

<pre><code class="language-nimrod"><span class="k">let</span> <span class="n">mittens</span><span class="p">:</span> <span class="k">ref</span> <span class="n">Animal</span> <span class="o">=</span> <span class="n">new</span><span class="p">(</span><span class="n">Animal</span><span class="p">)</span>

<span class="n">mittens</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Mittens"</span>
<span class="n">mittens</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="s">"P. leo"</span>
<span class="n">mittens</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">6</span>

<span class="n">mittens</span><span class="p">.</span><span class="n">sleep</span><span class="p">()</span></code></pre>

<p><code>mittens</code> is a reference to an object allocated on the heap. The value of <code>mittens</code> cannot be changed, so <code>mittens</code> can never point to anything else, but the value that <code>mittens</code> is pointing at can and is changed from the default initialization value of zeros. Its mutability also means that <code>mittens</code> can be passed to functions that require a variable parameter.</p>

<p>You might ask whether there is a more concise way of initializing  reference types, and there is if you give the reference type a name:</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">AnimalRef</span><span class="o">*</span> <span class="o">=</span> <span class="k">ref</span> <span class="n">Animal</span>

<span class="k">let</span> <span class="n">spot</span> <span class="o">=</span> <span class="n">AnimalRef</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Spot"</span><span class="p">,</span>
                   <span class="n">species</span><span class="p">:</span> <span class="s">"C. lupus"</span><span class="p">,</span>
                   <span class="n">age</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span></code></pre>

<p>In many cases it is only wanted to have the object be a reference type, which is possible by declaring it as a <code>ref object</code>.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Thing</span><span class="o">*</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span>
    <span class="n">positionX</span><span class="o">*</span><span class="p">,</span> <span class="n">positionY</span><span class="o">*</span><span class="p">:</span> <span class="kt">int</span></code></pre>
;
T;@o;;;;	I"/content/types/distinct/;
T{;{	;U;[0I"H<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Distinct Types</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="distinct-types">Distinct Types</h1>

<p>Distinct types are like other type aliases, but they provide type safety so that it is impossible to coerce a distinct type into its base type without explicit conversion.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Dollars</span><span class="o">*</span> <span class="o">=</span> <span class="k">distinct</span> <span class="kt">float</span>

<span class="kd">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">20.</span><span class="n">Dollars</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>  <span class="c"># Doesn't compile</span>
<span class="n">a</span> <span class="o">=</span> <span class="mf">25.</span><span class="n">Dollars</span>  <span class="c"># Works fine</span></code></pre>

<p>However, when using distinct types, none of the base type‚Äôs procedures follow the type. To solve this, it is possible to create lots of procedures that basically act as a thin wrapper for the underlying types, or the <code>{.borrow.}</code> pragma can be used to automate generation of procedures.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">`*`</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dollars</span><span class="p">):</span> <span class="n">Dollars</span> <span class="p">{.</span><span class="n">borrow</span><span class="p">.}</span>
<span class="k">proc </span><span class="nf">`+`</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dollars</span><span class="p">):</span> <span class="n">Dollars</span> <span class="p">{.</span><span class="n">borrow</span><span class="p">.}</span>
<span class="n">a</span> <span class="o">=</span> <span class="mf">20.</span><span class="n">Dollars</span> <span class="o">*</span> <span class="mf">20.</span><span class="n">Dollars</span></code></pre>

<p>When creating a distinct type from an object type, none of its fields are carried over. If the fields are wanted, they can be brought over through an overloading of the <code>{.borrow.}</code> pragma. If they are not borrowed, they cannot be accessed.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Foo</span> <span class="o">=</span> <span class="k">object</span>
    <span class="n">a</span><span class="p">:</span> <span class="kt">int</span>
  <span class="n">MyFoo</span> <span class="p">{.</span><span class="n">borrow</span><span class="p">:</span> <span class="p">`.`.}</span> <span class="o">=</span> <span class="k">distinct</span> <span class="n">Foo</span>

<span class="kd">var</span> <span class="n">value</span><span class="p">:</span> <span class="n">MyFoo</span>
<span class="n">echo</span> <span class="n">value</span><span class="p">.</span><span class="n">a</span>  <span class="c"># Works</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"7/pipeline/source/content/content/types/distinct.md;
TI"Q# Distinct Types

Distinct types are like other type aliases, but they provide type safety so that it is impossible to coerce a distinct type into its base type without explicit conversion.

``` nimrod
type
  Dollars* = distinct float

var a = 20.Dollars
a = 25  # Doesn't compile
a = 25.Dollars  # Works fine
```

However, when using distinct types, none of the base type's procedures follow the type. To solve this, it is possible to create lots of procedures that basically act as a thin wrapper for the underlying types, or the `{.borrow.}` pragma can be used to automate generation of procedures.

``` nimrod
proc `*` *(a, b: Dollars): Dollars {.borrow.}
proc `+` *(a, b: Dollars): Dollars {.borrow.}
a = 20.Dollars * 20.Dollars
```

When creating a distinct type from an object type, none of its fields are carried over. If the fields are wanted, they can be brought over through an overloading of the `{.borrow.}` pragma. If they are not borrowed, they cannot be accessed.

``` nimrod
type
  Foo = object
    a: int
  MyFoo {.borrow: `.`.} = distinct Foo

var value: MyFoo
echo value.a  # Works
```;
T;U;[0I"!<h1 id="distinct-types">Distinct Types</h1>

<p>Distinct types are like other type aliases, but they provide type safety so that it is impossible to coerce a distinct type into its base type without explicit conversion.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Dollars</span><span class="o">*</span> <span class="o">=</span> <span class="k">distinct</span> <span class="kt">float</span>

<span class="kd">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">20.</span><span class="n">Dollars</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>  <span class="c"># Doesn't compile</span>
<span class="n">a</span> <span class="o">=</span> <span class="mf">25.</span><span class="n">Dollars</span>  <span class="c"># Works fine</span></code></pre>

<p>However, when using distinct types, none of the base type‚Äôs procedures follow the type. To solve this, it is possible to create lots of procedures that basically act as a thin wrapper for the underlying types, or the <code>{.borrow.}</code> pragma can be used to automate generation of procedures.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">`*`</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dollars</span><span class="p">):</span> <span class="n">Dollars</span> <span class="p">{.</span><span class="n">borrow</span><span class="p">.}</span>
<span class="k">proc </span><span class="nf">`+`</span> <span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dollars</span><span class="p">):</span> <span class="n">Dollars</span> <span class="p">{.</span><span class="n">borrow</span><span class="p">.}</span>
<span class="n">a</span> <span class="o">=</span> <span class="mf">20.</span><span class="n">Dollars</span> <span class="o">*</span> <span class="mf">20.</span><span class="n">Dollars</span></code></pre>

<p>When creating a distinct type from an object type, none of its fields are carried over. If the fields are wanted, they can be brought over through an overloading of the <code>{.borrow.}</code> pragma. If they are not borrowed, they cannot be accessed.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Foo</span> <span class="o">=</span> <span class="k">object</span>
    <span class="n">a</span><span class="p">:</span> <span class="kt">int</span>
  <span class="n">MyFoo</span> <span class="p">{.</span><span class="n">borrow</span><span class="p">:</span> <span class="p">`.`.}</span> <span class="o">=</span> <span class="k">distinct</span> <span class="n">Foo</span>

<span class="kd">var</span> <span class="n">value</span><span class="p">:</span> <span class="n">MyFoo</span>
<span class="n">echo</span> <span class="n">value</span><span class="p">.</span><span class="n">a</span>  <span class="c"># Works</span></code></pre>
;
T;@o;;;;	I"/content/types/;
T{;{	;U;[0I",?<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Types</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="types">Types</h1>

<p>Types are declared inside type sections, where multiple types can be declared. Note that aliased types are the same, and not in any way incompatible with their original type. If type safety is desired, <a href="distinct/">distinct types</a> should be used.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">MyInteger</span><span class="o">*</span> <span class="o">=</span> <span class="kt">int</span>

<span class="k">let</span> <span class="n">a</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">discard</span> <span class="n">a</span> <span class="o">+</span> <span class="n">MyInteger</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"./pipeline/source/content/content/types.md;
TI"W# Types

Types are declared inside type sections, where multiple types can be declared. Note that aliased types are the same, and not in any way incompatible with their original type. If type safety is desired, [distinct types](/types/distinct/) should be used.

``` nimrod
type
  MyInteger* = int

let a: int = 2
discard a + MyInteger(4)
```
;
T;U;[0I"7<h1 id="types">Types</h1>

<p>Types are declared inside type sections, where multiple types can be declared. Note that aliased types are the same, and not in any way incompatible with their original type. If type safety is desired, <a href="distinct/">distinct types</a> should be used.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">MyInteger</span><span class="o">*</span> <span class="o">=</span> <span class="kt">int</span>

<span class="k">let</span> <span class="n">a</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">discard</span> <span class="n">a</span> <span class="o">+</span> <span class="n">MyInteger</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></code></pre>
;
T;@o;;;;	I"/content/varargs/;
T{;{	;U;[0I"+G<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Varargs</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="varargs">Varargs</h1>

<p>Standard varargs simply allows you to pass multiple parameters to your function.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">printThings</span><span class="p">(</span><span class="n">things</span><span class="p">:</span> <span class="n">varargs</span><span class="o">[</span><span class="kt">string</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">thing</span> <span class="ow">in</span> <span class="n">things</span><span class="p">:</span>
    <span class="n">echo</span> <span class="n">thing</span>

<span class="n">printThings</span> <span class="s">"words"</span><span class="p">,</span> <span class="s">"to"</span><span class="p">,</span> <span class="s">"print"</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./varargs1.nim
<span class="go">words</span>
<span class="go">to</span>
<span class="go">print</span></code></pre>

<p>However, trying to run</p>

<pre><code class="language-nimrod"><span class="n">printThings</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"string"</span><span class="p">,</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span></code></pre>

<p>will fail to compile because the compiler won‚Äôt coerce anything into strings. Luckily enough, there is a tool to fix this, the coercing varargs:</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">printThings</span><span class="p">(</span><span class="n">things</span><span class="p">:</span> <span class="n">varargs</span><span class="o">[</span><span class="kt">string</span><span class="p">,</span> <span class="p">`</span><span class="o">$</span><span class="p">`</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">thing</span> <span class="ow">in</span> <span class="n">things</span><span class="p">:</span>
    <span class="n">echo</span> <span class="n">thing</span>

<span class="n">printThings</span> <span class="s">"thing 1"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">@[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r ./varargs2.nim
<span class="go">thing 1</span>
<span class="go">2</span>
<span class="go">@[4, 5, 6]</span></code></pre>

<p>It works by finding a function <code>`$`</code> that returns string for each argument type, and applying it to each argument.</p>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"0/pipeline/source/content/content/varargs.md;
TI";# Varargs

Standard varargs simply allows you to pass multiple parameters to your function.

``` nimrod
proc printThings(things: varargs[string]) =
  for thing in things:
    echo thing

printThings "words", "to", "print"
```
```console
$ nim c -r ./varargs1.nim
words
to
print
```

However, trying to run

``` nimrod
printThings 1, "string", @[1, 2, 3]
```

will fail to compile because the compiler won't coerce anything into strings. Luckily enough, there is a tool to fix this, the coercing varargs:

``` nimrod
proc printThings(things: varargs[string, `$`]) =
  for thing in things:
    echo thing

printThings "thing 1", 2, @[4, 5, 6]
```

```console
$ nim c -r ./varargs2.nim
thing 1
2
@[4, 5, 6]
```

It works by finding a function `` `$` `` that returns string for each argument type, and applying it to each argument.;
T;U;[0I"4<h1 id="varargs">Varargs</h1>

<p>Standard varargs simply allows you to pass multiple parameters to your function.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">printThings</span><span class="p">(</span><span class="n">things</span><span class="p">:</span> <span class="n">varargs</span><span class="o">[</span><span class="kt">string</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">thing</span> <span class="ow">in</span> <span class="n">things</span><span class="p">:</span>
    <span class="n">echo</span> <span class="n">thing</span>

<span class="n">printThings</span> <span class="s">"words"</span><span class="p">,</span> <span class="s">"to"</span><span class="p">,</span> <span class="s">"print"</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./varargs1.nim
<span class="go">words</span>
<span class="go">to</span>
<span class="go">print</span></code></pre>

<p>However, trying to run</p>

<pre><code class="language-nimrod"><span class="n">printThings</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"string"</span><span class="p">,</span> <span class="o">@[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span></code></pre>

<p>will fail to compile because the compiler won‚Äôt coerce anything into strings. Luckily enough, there is a tool to fix this, the coercing varargs:</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">printThings</span><span class="p">(</span><span class="n">things</span><span class="p">:</span> <span class="n">varargs</span><span class="o">[</span><span class="kt">string</span><span class="p">,</span> <span class="p">`</span><span class="o">$</span><span class="p">`</span><span class="o">]</span><span class="p">)</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">thing</span> <span class="ow">in</span> <span class="n">things</span><span class="p">:</span>
    <span class="n">echo</span> <span class="n">thing</span>

<span class="n">printThings</span> <span class="s">"thing 1"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">@[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r ./varargs2.nim
<span class="go">thing 1</span>
<span class="go">2</span>
<span class="go">@[4, 5, 6]</span></code></pre>

<p>It works by finding a function <code>`$`</code> that returns string for each argument type, and applying it to each argument.</p>
;
T;@-o;;;;	I"/content/if_else_while/;
T{;{	;U;[0I"ºE<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - If, Else, While</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="if-else-while">If, Else, While</h1>

<p>Nim has many different control flow constructs, including the standard <code>if</code>s, <code>else</code>s, and <code>while</code>s. However, Nim does not use an <code>else if</code> construct like many languages, it uses a more condensed <code>elif</code>.</p>

<p>When inside a loop, <code>continue</code> can be used to skip the rest of the loop body and to begin the next iteration; <code>break</code> can be used to immediately leave the loop body.</p>

<p>Along with <a href="../block/">its other uses</a>, the <code>block</code> statement can be used to create a label so that it‚Äôs possible to break out of nested loops.</p>

<!--skip-->
<pre><code class="language-nim"><span class="kn">import</span> <span class="n">strutils</span><span class="p">,</span> <span class="n">random</span>

<span class="n">randomize</span><span class="p">()</span>
<span class="k">let</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">random</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"I have a number from 1 to 10, what is it? "</span>
  <span class="k">let</span> <span class="n">guess</span> <span class="o">=</span> <span class="n">parseInt</span><span class="p">(</span><span class="n">stdin</span><span class="p">.</span><span class="n">readLine</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">guess</span> <span class="o">&lt;</span> <span class="n">answer</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Too low, try again"</span>
  <span class="k">elif</span> <span class="n">guess</span> <span class="o">&gt;</span> <span class="n">answer</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Too high, try again"</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Correct!"</span>
    <span class="k">break</span>

<span class="k">block</span> <span class="n">busyloops</span><span class="p">:</span>
  <span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
    <span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
      <span class="k">break</span> <span class="n">busyloops</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"6/pipeline/source/content/content/if_else_while.md;
TI"¨
# If, Else, While

Nim has many different control flow constructs, including the standard `if`s, `else`s, and `while`s. However, Nim does not use an `else if` construct like many languages, it uses a more condensed `elif`.

When inside a loop, `continue` can be used to skip the rest of the loop body and to begin the next iteration; `break` can be used to immediately leave the loop body.

Along with [its other uses](/block/), the `block` statement can be used to create a label so that it's possible to break out of nested loops.

<!--skip-->``` nim
import strutils, random

randomize()
let answer = random(10) + 1
while true:
  echo "I have a number from 1 to 10, what is it? "
  let guess = parseInt(stdin.readLine)

  if guess < answer:
    echo "Too low, try again"
  elif guess > answer:
    echo "Too high, try again"
  else:
    echo "Correct!"
    break

block busyloops:
  while true:
    while true:
      break busyloops
```
;
T;U;[0I"Ω	
<h1 id="if-else-while">If, Else, While</h1>

<p>Nim has many different control flow constructs, including the standard <code>if</code>s, <code>else</code>s, and <code>while</code>s. However, Nim does not use an <code>else if</code> construct like many languages, it uses a more condensed <code>elif</code>.</p>

<p>When inside a loop, <code>continue</code> can be used to skip the rest of the loop body and to begin the next iteration; <code>break</code> can be used to immediately leave the loop body.</p>

<p>Along with <a href="../block/">its other uses</a>, the <code>block</code> statement can be used to create a label so that it‚Äôs possible to break out of nested loops.</p>

<!--skip-->
<pre><code class="language-nim"><span class="kn">import</span> <span class="n">strutils</span><span class="p">,</span> <span class="n">random</span>

<span class="n">randomize</span><span class="p">()</span>
<span class="k">let</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">random</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"I have a number from 1 to 10, what is it? "</span>
  <span class="k">let</span> <span class="n">guess</span> <span class="o">=</span> <span class="n">parseInt</span><span class="p">(</span><span class="n">stdin</span><span class="p">.</span><span class="n">readLine</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">guess</span> <span class="o">&lt;</span> <span class="n">answer</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Too low, try again"</span>
  <span class="k">elif</span> <span class="n">guess</span> <span class="o">&gt;</span> <span class="n">answer</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Too high, try again"</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Correct!"</span>
    <span class="k">break</span>

<span class="k">block</span> <span class="n">busyloops</span><span class="p">:</span>
  <span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
    <span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
      <span class="k">break</span> <span class="n">busyloops</span></code></pre>
;
T;@;o;;;;	I"/content/exceptions/;
T{;{	;U;[0I"<<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Exceptions</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="exceptions">Exceptions</h1>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"3/pipeline/source/content/content/exceptions.md;
TI"# Exceptions;
T;U;[0I")<h1 id="exceptions">Exceptions</h1>
;
T;@Io;;;;	I"/content/;
T{;{	;U;[0I"©B<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Main</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="nim-by-example">Nim by Example</h1>

<p><a href="http://nim-lang.org/">Nim</a> is a powerful statically typed language that allows the programmer expressiveness without compromising run-time performance. As a general purpose programming language, it gives the same sort of power and performance as C++, but in a nicer package and with even more powerful tools!</p>

<p>Getting started? Head over to the <a href="getting_started/">installation instructions</a>!</p>

<pre><code class="language-nim"><span class="kn">import</span> <span class="n">tables</span><span class="p">,</span> <span class="n">strutils</span>

<span class="kd">var</span> <span class="n">wordFrequencies</span> <span class="o">=</span> <span class="n">initCountTable</span><span class="o">[</span><span class="kt">string</span><span class="o">]</span><span class="p">()</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdin</span><span class="p">.</span><span class="n">lines</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">", "</span><span class="p">):</span>
    <span class="n">wordFrequencies</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

<span class="n">echo</span> <span class="s">"The most frequent word is '"</span><span class="p">,</span> <span class="n">wordFrequencies</span><span class="p">.</span><span class="n">largest</span><span class="p">,</span> <span class="s">"'"</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"./pipeline/source/content/content/index.md;
TI"í
# Nim by Example

[Nim] is a powerful statically typed language that allows the programmer expressiveness without compromising run-time performance. As a general purpose programming language, it gives the same sort of power and performance as C++, but in a nicer package and with even more powerful tools!

[Nim]: http://nim-lang.org/

Getting started? Head over to the [installation instructions](/getting_started/)!

``` nim
import tables, strutils

var wordFrequencies = initCountTable[string]()

for line in stdin.lines:
  for word in line.split(", "):
    wordFrequencies.inc(word)

echo "The most frequent word is '", wordFrequencies.largest, "'"
```
;
T;U;[0I"µ
<h1 id="nim-by-example">Nim by Example</h1>

<p><a href="http://nim-lang.org/">Nim</a> is a powerful statically typed language that allows the programmer expressiveness without compromising run-time performance. As a general purpose programming language, it gives the same sort of power and performance as C++, but in a nicer package and with even more powerful tools!</p>

<p>Getting started? Head over to the <a href="getting_started/">installation instructions</a>!</p>

<pre><code class="language-nim"><span class="kn">import</span> <span class="n">tables</span><span class="p">,</span> <span class="n">strutils</span>

<span class="kd">var</span> <span class="n">wordFrequencies</span> <span class="o">=</span> <span class="n">initCountTable</span><span class="o">[</span><span class="kt">string</span><span class="o">]</span><span class="p">()</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdin</span><span class="p">.</span><span class="n">lines</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">", "</span><span class="p">):</span>
    <span class="n">wordFrequencies</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

<span class="n">echo</span> <span class="s">"The most frequent word is '"</span><span class="p">,</span> <span class="n">wordFrequencies</span><span class="p">.</span><span class="n">largest</span><span class="p">,</span> <span class="s">"'"</span></code></pre>
;
T;@Wo;;;;	I"/content/oop/;
T{;{	;U;[0I"eR<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Object Oriented Programming</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="object-oriented-programming">Object Oriented Programming</h1>

<p>Object oriented programming is supported through inheritance and methods, which are virtual procedures. Methods work in the same way as <a href="../procs/">procs</a>, including UFCS, but the runtime type of the object that a method is called with is used to determine which version to call.</p>

<p>Inheritance is created with the <code>of</code> keyword in the type declaration of an object. A method is overridden by creating a new method with parameter types of the subtype.</p>

<pre><code class="language-nimrod"><span class="k">type</span> <span class="n">Animal</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">RootObj</span>
  <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="s">"..."</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span>

<span class="k">type</span> <span class="n">Dog</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>

<span class="k">type</span> <span class="n">Cat</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Cat</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span>


<span class="kd">var</span> <span class="n">animals</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="n">Animal</span><span class="o">]</span> <span class="o">=</span> <span class="o">@[]</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dog</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Sparky"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Cat</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Mitten"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">animals</span><span class="p">:</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">vocalize</span><span class="p">()</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">ageHumanYrs</span><span class="p">()</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r oop.nim
<span class="go">woof</span>
<span class="go">70</span>
<span class="go">meow</span>
<span class="go">10</span></code></pre>

<h2 id="testing-subtypes">Testing subtypes</h2>

<p>It is also possible to check if an object is of a given subtype with the <code>of</code> keyword. For example,</p>

<pre><code class="language-nimrod"><span class="n">echo</span><span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">of</span> <span class="n">Dog</span><span class="p">)</span>
<span class="n">echo</span><span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">of</span> <span class="n">Cat</span><span class="p">)</span>
<span class="n">echo</span><span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">)</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r of_op.nim
<span class="go">true</span>
<span class="go">false</span>
<span class="go">true</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I",/pipeline/source/content/content/oop.md;
TI"[
# Object Oriented Programming

Object oriented programming is supported through inheritance and methods, which are virtual procedures. Methods work in the same way as [procs](/procs/), including UFCS, but the runtime type of the object that a method is called with is used to determine which version to call.

Inheritance is created with the `of` keyword in the type declaration of an object. A method is overridden by creating a new method with parameter types of the subtype. 

``` nimrod
type Animal = ref object of RootObj
  name: string
  age: int
method vocalize(this: Animal): string {.base.} = "..."
method ageHumanYrs(this: Animal): int {.base.} = this.age

type Dog = ref object of Animal
method vocalize(this: Dog): string = "woof"
method ageHumanYrs(this: Dog): int = this.age * 7

type Cat = ref object of Animal
method vocalize(this: Cat): string = "meow"


var animals: seq[Animal] = @[]
animals.add(Dog(name: "Sparky", age: 10))
animals.add(Cat(name: "Mitten", age: 10))

for a in animals:
  echo a.vocalize()
  echo a.ageHumanYrs()
```
``` console
$ nim c -r oop.nim
woof
70
meow
10
```

## Testing subtypes

It is also possible to check if an object is of a given subtype with the `of` keyword. For example,

``` nimrod
echo(animals[0] of Dog)
echo(animals[0] of Cat)
echo(animals[0] of Animal)
```
``` console
$ nim c -r of_op.nim
true
false
true
```
;
T;U;[0I"Z
<h1 id="object-oriented-programming">Object Oriented Programming</h1>

<p>Object oriented programming is supported through inheritance and methods, which are virtual procedures. Methods work in the same way as <a href="../procs/">procs</a>, including UFCS, but the runtime type of the object that a method is called with is used to determine which version to call.</p>

<p>Inheritance is created with the <code>of</code> keyword in the type declaration of an object. A method is overridden by creating a new method with parameter types of the subtype.</p>

<pre><code class="language-nimrod"><span class="k">type</span> <span class="n">Animal</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">RootObj</span>
  <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="s">"..."</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span>

<span class="k">type</span> <span class="n">Dog</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>

<span class="k">type</span> <span class="n">Cat</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Cat</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span>


<span class="kd">var</span> <span class="n">animals</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="n">Animal</span><span class="o">]</span> <span class="o">=</span> <span class="o">@[]</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dog</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Sparky"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Cat</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Mitten"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">animals</span><span class="p">:</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">vocalize</span><span class="p">()</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">ageHumanYrs</span><span class="p">()</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r oop.nim
<span class="go">woof</span>
<span class="go">70</span>
<span class="go">meow</span>
<span class="go">10</span></code></pre>

<h2 id="testing-subtypes">Testing subtypes</h2>

<p>It is also possible to check if an object is of a given subtype with the <code>of</code> keyword. For example,</p>

<pre><code class="language-nimrod"><span class="n">echo</span><span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">of</span> <span class="n">Dog</span><span class="p">)</span>
<span class="n">echo</span><span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">of</span> <span class="n">Cat</span><span class="p">)</span>
<span class="n">echo</span><span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">)</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r of_op.nim
<span class="go">true</span>
<span class="go">false</span>
<span class="go">true</span></code></pre>
;
T;@eo;;;;	I"/content/arrays/;
T{;{	;U;[0I".]<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Arrays</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="arrays">Arrays</h1>

<p>The arrays in Nim are like classic C arrays, their size is specified at compile-time and cannot be given or changed at runtime.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">ThreeStringAddress</span> <span class="o">=</span> <span class="kt">array</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="kt">string</span><span class="o">]</span>
<span class="k">let</span> <span class="n">names</span><span class="p">:</span> <span class="n">ThreeStringAddress</span> <span class="o">=</span> <span class="o">[</span><span class="s">"Jasmine"</span><span class="p">,</span> <span class="s">"Ktisztina"</span><span class="p">,</span> <span class="s">"Kristof"</span><span class="o">]</span>
<span class="k">let</span> <span class="n">addresses</span><span class="p">:</span> <span class="n">ThreeStringAddress</span> <span class="o">=</span> <span class="o">[</span><span class="s">"101 Betburweg"</span><span class="p">,</span> <span class="s">"66 Bellion Drive"</span><span class="p">,</span> <span class="s">"194 Laarderweg"</span><span class="o">]</span></code></pre>

<p>The size of the array is encoded in its type and cannot be accidentally lost. Therefore, a procedure taking an array of variable length must encode the length in its type parameters.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">zip</span><span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="n">T</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">array</span><span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="n">T</span><span class="o">]</span><span class="p">):</span>
               <span class="kt">array</span><span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="k">tuple</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="o">]]</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">low</span><span class="p">(</span><span class="n">a</span><span class="p">)..</span><span class="n">high</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>

<span class="k">let</span> <span class="n">nameAndAddresses</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">zip</span><span class="p">(</span><span class="n">addresses</span><span class="p">)</span></code></pre>

<p>Alternate methods of indexing arrays are also allowed, the first type parameter is actually a range (just a value, as above, is syntactic sugar for <code>0..N-1</code>). It‚Äôs also possible to use ordinal values to index an array, effectively creating a lookup table:</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">PartsOfSpeech</span> <span class="p">{.</span><span class="n">pure</span><span class="p">.}</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">Pronoun</span><span class="p">,</span> <span class="n">Verb</span><span class="p">,</span> <span class="n">Article</span><span class="p">,</span> <span class="n">Adjective</span><span class="p">,</span> <span class="n">Noun</span><span class="p">,</span> <span class="n">Adverb</span>
<span class="k">let</span> <span class="n">partOfSpeechExamples</span><span class="p">:</span> <span class="kt">array</span><span class="o">[</span><span class="n">PartsOfSpeech</span><span class="p">,</span> <span class="kt">string</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span>
  <span class="s">"he"</span><span class="p">,</span> <span class="s">"reads"</span><span class="p">,</span> <span class="s">"the"</span><span class="p">,</span> <span class="s">"green"</span><span class="p">,</span> <span class="s">"book"</span><span class="p">,</span> <span class="s">"slowly"</span>
<span class="o">]</span></code></pre>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Matrix</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="p">:</span> <span class="n">static</span><span class="o">[</span><span class="kt">int</span><span class="o">]]</span> <span class="o">=</span>
    <span class="kt">array</span><span class="o">[</span><span class="mf">1</span><span class="p">..</span><span class="n">W</span><span class="p">,</span> <span class="kt">array</span><span class="o">[</span><span class="mf">1</span><span class="p">..</span><span class="n">H</span><span class="p">,</span> <span class="kt">int</span><span class="o">]]</span>

<span class="k">let</span> <span class="n">mat1</span><span class="p">:</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">,</span>
                          <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]]</span>
<span class="k">let</span> <span class="n">mat2</span><span class="p">:</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span>
                          <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]]</span>

<span class="k">proc </span><span class="nf">`+`</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Matrix</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="o">]</span><span class="p">):</span>
               <span class="n">Matrix</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="o">]</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">1</span><span class="p">..</span><span class="n">high</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="mf">1</span><span class="p">..</span><span class="n">high</span><span class="p">(</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">):</span>
      <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span>

<span class="c"># See `$` from the procs section</span>

<span class="n">echo</span> <span class="n">mat1</span> <span class="o">+</span> <span class="n">mat2</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r matrix.nim
<span class="go">1, 1, </span>
<span class="go">1, 1,</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"//pipeline/source/content/content/arrays.md;
TI"°
# Arrays

The arrays in Nim are like classic C arrays, their size is specified at compile-time and cannot be given or changed at runtime.

``` nimrod
type
  ThreeStringAddress = array[3, string]
let names: ThreeStringAddress = ["Jasmine", "Ktisztina", "Kristof"]
let addresses: ThreeStringAddress = ["101 Betburweg", "66 Bellion Drive", "194 Laarderweg"]
```

The size of the array is encoded in its type and cannot be accidentally lost. Therefore, a procedure taking an array of variable length must encode the length in its type parameters.

``` nimrod
proc zip[I, T](a, b: array[I, T]):
               array[I, tuple[a, b: T]] =
  for i in low(a)..high(a):
    result[i] = (a[i], b[i])

let nameAndAddresses = names.zip(addresses)
```

Alternate methods of indexing arrays are also allowed, the first type parameter is actually a range (just a value, as above, is syntactic sugar for `0..N-1`). It's also possible to use ordinal values to index an array, effectively creating a lookup table:

``` nimrod
type
  PartsOfSpeech {.pure.} = enum
    Pronoun, Verb, Article, Adjective, Noun, Adverb
let partOfSpeechExamples: array[PartsOfSpeech, string] = [
  "he", "reads", "the", "green", "book", "slowly"
]
```

``` nimrod
type
  Matrix[W, H: static[int]] =
    array[1..W, array[1..H, int]]

let mat1: Matrix[2, 2] = [[1, 0],
                          [0, 1]]
let mat2: Matrix[2, 2] = [[0, 1],
                          [1, 0]]

proc `+`[W, H](a, b: Matrix[W, H]):
               Matrix[W, H] =
  for i in 1..high(a):
    for j in 1..high(a[0]):
      result[i][j] = a[i][j] + b[i][j]

# See `$` from the procs section

echo mat1 + mat2
```

``` console
$ nim c -r matrix.nim
1, 1, 
1, 1, 

```
;
T;U;[0I"8!
<h1 id="arrays">Arrays</h1>

<p>The arrays in Nim are like classic C arrays, their size is specified at compile-time and cannot be given or changed at runtime.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">ThreeStringAddress</span> <span class="o">=</span> <span class="kt">array</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="kt">string</span><span class="o">]</span>
<span class="k">let</span> <span class="n">names</span><span class="p">:</span> <span class="n">ThreeStringAddress</span> <span class="o">=</span> <span class="o">[</span><span class="s">"Jasmine"</span><span class="p">,</span> <span class="s">"Ktisztina"</span><span class="p">,</span> <span class="s">"Kristof"</span><span class="o">]</span>
<span class="k">let</span> <span class="n">addresses</span><span class="p">:</span> <span class="n">ThreeStringAddress</span> <span class="o">=</span> <span class="o">[</span><span class="s">"101 Betburweg"</span><span class="p">,</span> <span class="s">"66 Bellion Drive"</span><span class="p">,</span> <span class="s">"194 Laarderweg"</span><span class="o">]</span></code></pre>

<p>The size of the array is encoded in its type and cannot be accidentally lost. Therefore, a procedure taking an array of variable length must encode the length in its type parameters.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">zip</span><span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="n">T</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">array</span><span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="n">T</span><span class="o">]</span><span class="p">):</span>
               <span class="kt">array</span><span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="k">tuple</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="o">]]</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">low</span><span class="p">(</span><span class="n">a</span><span class="p">)..</span><span class="n">high</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>

<span class="k">let</span> <span class="n">nameAndAddresses</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">zip</span><span class="p">(</span><span class="n">addresses</span><span class="p">)</span></code></pre>

<p>Alternate methods of indexing arrays are also allowed, the first type parameter is actually a range (just a value, as above, is syntactic sugar for <code>0..N-1</code>). It‚Äôs also possible to use ordinal values to index an array, effectively creating a lookup table:</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">PartsOfSpeech</span> <span class="p">{.</span><span class="n">pure</span><span class="p">.}</span> <span class="o">=</span> <span class="k">enum</span>
    <span class="n">Pronoun</span><span class="p">,</span> <span class="n">Verb</span><span class="p">,</span> <span class="n">Article</span><span class="p">,</span> <span class="n">Adjective</span><span class="p">,</span> <span class="n">Noun</span><span class="p">,</span> <span class="n">Adverb</span>
<span class="k">let</span> <span class="n">partOfSpeechExamples</span><span class="p">:</span> <span class="kt">array</span><span class="o">[</span><span class="n">PartsOfSpeech</span><span class="p">,</span> <span class="kt">string</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span>
  <span class="s">"he"</span><span class="p">,</span> <span class="s">"reads"</span><span class="p">,</span> <span class="s">"the"</span><span class="p">,</span> <span class="s">"green"</span><span class="p">,</span> <span class="s">"book"</span><span class="p">,</span> <span class="s">"slowly"</span>
<span class="o">]</span></code></pre>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">Matrix</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="p">:</span> <span class="n">static</span><span class="o">[</span><span class="kt">int</span><span class="o">]]</span> <span class="o">=</span>
    <span class="kt">array</span><span class="o">[</span><span class="mf">1</span><span class="p">..</span><span class="n">W</span><span class="p">,</span> <span class="kt">array</span><span class="o">[</span><span class="mf">1</span><span class="p">..</span><span class="n">H</span><span class="p">,</span> <span class="kt">int</span><span class="o">]]</span>

<span class="k">let</span> <span class="n">mat1</span><span class="p">:</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">,</span>
                          <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]]</span>
<span class="k">let</span> <span class="n">mat2</span><span class="p">:</span> <span class="n">Matrix</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span>
                          <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]]</span>

<span class="k">proc </span><span class="nf">`+`</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Matrix</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="o">]</span><span class="p">):</span>
               <span class="n">Matrix</span><span class="o">[</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="o">]</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">1</span><span class="p">..</span><span class="n">high</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="mf">1</span><span class="p">..</span><span class="n">high</span><span class="p">(</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">):</span>
      <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span>

<span class="c"># See `$` from the procs section</span>

<span class="n">echo</span> <span class="n">mat1</span> <span class="o">+</span> <span class="n">mat2</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r matrix.nim
<span class="go">1, 1, </span>
<span class="go">1, 1,</span></code></pre>
;
T;@so;;;;	I"/content/oop_macro/;
T{;{	;U;[0I"|°<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - OOP Macro</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <!--- Thanks to fowl for creating this page, filwit for fixing some oddities -->

<h1 id="oop-macro">OOP Macro</h1>
<p>This is the code that we currently must write to use OOP in Nim:</p>

<pre><code class="language-nimrod"><span class="k">type</span> <span class="n">Animal</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">RootObj</span>
  <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="s">"..."</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span>

<span class="k">type</span> <span class="n">Dog</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>

<span class="k">type</span> <span class="n">Cat</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Cat</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span></code></pre>

<p>All these typedefs and <code>this: T</code> parameters are repetitive, so it‚Äôd be good to write a macro to mask them. Something like this would be best:</p>

<pre><code class="language-nimrod"><span class="n">class</span> <span class="n">Animal</span> <span class="k">of</span> <span class="n">RootObj</span><span class="p">:</span>
  <span class="kd">var</span> <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="kd">var</span> <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"..."</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="c"># `this` is injected</span>

<span class="n">class</span> <span class="n">Dog</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>

<span class="n">class</span> <span class="n">Cat</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span></code></pre>

<p>To get that nice notation, we can use a macro:</p>

<pre><code class="language-nimrod"><span class="kn">import</span> <span class="n">macros</span>

<span class="k">macro</span> <span class="n">class</span><span class="o">*</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">:</span> <span class="n">untyped</span><span class="p">):</span> <span class="n">untyped</span> <span class="o">=</span>
  <span class="c"># The macro is immediate, since all its parameters are untyped.</span>
  <span class="c"># This means, it doesn't resolve identifiers passed to it.</span>

  <span class="kd">var</span> <span class="n">typeName</span><span class="p">,</span> <span class="n">baseName</span><span class="p">:</span> <span class="n">NimNode</span>

  <span class="c"># flag if object should be exported</span>
  <span class="kd">var</span> <span class="n">exported</span><span class="p">:</span> <span class="kt">bool</span>

  <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">nnkInfix</span> <span class="ow">and</span> <span class="n">head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="o">!</span><span class="s">"of"</span><span class="p">:</span>
    <span class="c"># `head` is expression `typeName of baseClass`</span>
    <span class="c"># echo head.treeRepr</span>
    <span class="c"># --------------------</span>
    <span class="c"># Infix</span>
    <span class="c">#   Ident !"of"</span>
    <span class="c">#   Ident !"Animal"</span>
    <span class="c">#   Ident !"RootObj"</span>
    <span class="n">typeName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">baseName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>

  <span class="k">elif</span> <span class="n">head</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">nnkInfix</span> <span class="ow">and</span> <span class="n">head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="o">!</span><span class="s">"*"</span> <span class="ow">and</span>
       <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">nnkPrefix</span> <span class="ow">and</span> <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="o">!</span><span class="s">"of"</span><span class="p">:</span>
    <span class="c"># `head` is expression `typeName* of baseClass`</span>
    <span class="c"># echo head.treeRepr</span>
    <span class="c"># --------------------</span>
    <span class="c"># Infix</span>
    <span class="c">#   Ident !"*"</span>
    <span class="c">#   Ident !"Animal"</span>
    <span class="c">#   Prefix</span>
    <span class="c">#     Ident !"of"</span>
    <span class="c">#     Ident !"RootObj"</span>
    <span class="n">typeName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">baseName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">exported</span> <span class="o">=</span> <span class="kp">true</span>

  <span class="k">else</span><span class="p">:</span>
    <span class="n">error</span> <span class="s">"Invalid node: "</span> <span class="o">&amp;</span> <span class="n">head</span><span class="p">.</span><span class="n">lispRepr</span>

  <span class="c"># The following prints out the AST structure:</span>
  <span class="c">#</span>
  <span class="c"># import macros</span>
  <span class="c"># dumptree:</span>
  <span class="c">#   type X = ref object of Y</span>
  <span class="c">#     z: int</span>
  <span class="c"># --------------------</span>
  <span class="c"># StmtList</span>
  <span class="c">#   TypeSection</span>
  <span class="c">#     TypeDef</span>
  <span class="c">#       Ident !"X"</span>
  <span class="c">#       Empty</span>
  <span class="c">#       RefTy</span>
  <span class="c">#         ObjectTy</span>
  <span class="c">#           Empty</span>
  <span class="c">#           OfInherit</span>
  <span class="c">#             Ident !"Y"</span>
  <span class="c">#           RecList</span>
  <span class="c">#             IdentDefs</span>
  <span class="c">#               Ident !"z"</span>
  <span class="c">#               Ident !"int"</span>
  <span class="c">#               Empty</span>

  <span class="c"># create a type section in the result</span>
  <span class="k">template</span> <span class="n">typeDecl</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span> <span class="n">untyped</span> <span class="o">=</span>
    <span class="k">type</span> <span class="n">a</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">b</span>

  <span class="k">template</span> <span class="n">typeDeclPub</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span> <span class="n">untyped</span> <span class="o">=</span>
    <span class="k">type</span> <span class="n">a</span><span class="o">*</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">b</span>

  <span class="k">if</span> <span class="n">exported</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">getAst</span><span class="p">(</span><span class="n">typeDeclPub</span><span class="p">(</span><span class="n">typeName</span><span class="p">,</span> <span class="n">baseName</span><span class="p">))</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">getAst</span><span class="p">(</span><span class="n">typeDecl</span><span class="p">(</span><span class="n">typeName</span><span class="p">,</span> <span class="n">baseName</span><span class="p">))</span>

  <span class="c"># echo treeRepr(body)</span>
  <span class="c"># --------------------</span>
  <span class="c"># StmtList</span>
  <span class="c">#   VarSection</span>
  <span class="c">#     IdentDefs</span>
  <span class="c">#       Ident !"name"</span>
  <span class="c">#       Ident !"string"</span>
  <span class="c">#       Empty</span>
  <span class="c">#     IdentDefs</span>
  <span class="c">#       Ident !"age"</span>
  <span class="c">#       Ident !"int"</span>
  <span class="c">#       Empty</span>
  <span class="c">#   MethodDef</span>
  <span class="c">#     Ident !"vocalize"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     FormalParams</span>
  <span class="c">#       Ident !"string"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     StmtList</span>
  <span class="c">#       StrLit ...</span>
  <span class="c">#   MethodDef</span>
  <span class="c">#     Ident !"age_human_yrs"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     FormalParams</span>
  <span class="c">#       Ident !"int"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     StmtList</span>
  <span class="c">#       DotExpr</span>
  <span class="c">#         Ident !"self"</span>
  <span class="c">#         Ident !"age"</span>

  <span class="c"># var declarations will be turned into object fields</span>
  <span class="kd">var</span> <span class="n">recList</span> <span class="o">=</span> <span class="n">newNimNode</span><span class="p">(</span><span class="n">nnkRecList</span><span class="p">)</span>

  <span class="c"># expected name of constructor</span>
  <span class="k">let</span> <span class="n">ctorName</span> <span class="o">=</span> <span class="n">newIdentNode</span><span class="p">(</span><span class="s">"new"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">typeName</span><span class="p">)</span>

  <span class="c"># Iterate over the statements, adding `self: T`</span>
  <span class="c"># to the parameters of functions, unless the</span>
  <span class="c"># function is a constructor</span>
  <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">body</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
    <span class="k">case</span> <span class="n">node</span><span class="p">.</span><span class="n">kind</span><span class="p">:</span>

    <span class="k">of</span> <span class="n">nnkMethodDef</span><span class="p">,</span> <span class="n">nnkProcDef</span><span class="p">:</span>
      <span class="c"># check if it is the ctor proc</span>
      <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">kind</span> <span class="o">!=</span> <span class="n">nnkAccQuoted</span> <span class="ow">and</span> <span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">basename</span> <span class="o">==</span> <span class="n">ctorName</span><span class="p">:</span>
        <span class="c"># specify the return type of the ctor proc</span>
        <span class="n">node</span><span class="p">.</span><span class="n">params</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">typeName</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="c"># inject `self: T` into the arguments</span>
        <span class="n">node</span><span class="p">.</span><span class="n">params</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">newIdentDefs</span><span class="p">(</span><span class="n">ident</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span> <span class="n">typeName</span><span class="p">))</span>
      <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="k">of</span> <span class="n">nnkVarSection</span><span class="p">:</span>
      <span class="c"># variables get turned into fields of the type.</span>
      <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
        <span class="n">recList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
      <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

  <span class="c"># Inspect the tree structure:</span>
  <span class="c">#</span>
  <span class="c"># echo result.treeRepr</span>
  <span class="c"># --------------------</span>
  <span class="c"># StmtList</span>
  <span class="c">#   TypeSection</span>
  <span class="c">#     TypeDef</span>
  <span class="c">#       Ident !"Animal"</span>
  <span class="c">#       Empty</span>
  <span class="c">#       RefTy</span>
  <span class="c">#         ObjectTy</span>
  <span class="c">#           Empty</span>
  <span class="c">#           OfInherit</span>
  <span class="c">#             Ident !"RootObj"</span>
  <span class="c">#           Empty   &lt;= We want to replace this</span>
  <span class="c"># MethodDef</span>
  <span class="c"># ...</span>

  <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">recList</span>

  <span class="c"># Lets inspect the human-readable version of the output</span>
  <span class="c"># echo repr(result)</span>
  <span class="c"># Output:</span>
  <span class="c">#  type</span>
  <span class="c">#    Animal = ref object of RootObj</span>
  <span class="c">#      name: string</span>
  <span class="c">#      age: int</span>
  <span class="c">#</span>
  <span class="c">#  method vocalize(self: Animal): string {.base.} =</span>
  <span class="c">#    "..."</span>
  <span class="c">#</span>
  <span class="c">#  method age_human_yrs(self: Animal): int {.base.} =</span>
  <span class="c">#    self.age</span>
  <span class="c"># ...</span>
  <span class="c">#</span>
  <span class="c"># type</span>
  <span class="c">#   Rabbit = ref object of Animal</span>
  <span class="c">#</span>
  <span class="c"># proc newRabbit(name: string; age: int): Rabbit =</span>
  <span class="c">#   result = Rabbit(name: name, age: age)</span>
  <span class="c">#</span>
  <span class="c"># method vocalize(self: Rabbit): string =</span>
  <span class="c">#   "meep"</span>

<span class="c"># ---</span>

<span class="n">class</span> <span class="n">Animal</span> <span class="k">of</span> <span class="n">RootObj</span><span class="p">:</span>
  <span class="kd">var</span> <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="kd">var</span> <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="s">"..."</span> <span class="c"># use `base` pragma to annotate base methods</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="c"># `self` is injected</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"animal:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="n">class</span> <span class="n">Dog</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"dog:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="n">class</span> <span class="n">Cat</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"cat:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="n">class</span> <span class="n">Rabbit</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">proc </span><span class="nf">newRabbit</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="kt">string</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="c"># the constructor doesn't need a return type</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">Rabbit</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meep"</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"rabbit:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="c"># ---</span>

<span class="kd">var</span> <span class="n">animals</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="n">Animal</span><span class="o">]</span> <span class="o">=</span> <span class="o">@[]</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dog</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Sparky"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Cat</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Mitten"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">animals</span><span class="p">:</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">vocalize</span><span class="p">()</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">age_human_yrs</span><span class="p">()</span>

<span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">newRabbit</span><span class="p">(</span><span class="s">"Fluffy"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">echo</span> <span class="n">r</span><span class="p">.</span><span class="n">vocalize</span><span class="p">()</span>
<span class="n">echo</span> <span class="n">r</span><span class="p">.</span><span class="n">age_human_yrs</span><span class="p">()</span>
<span class="c"># `$` is not dynamically dispatched--if `r`'s type was</span>
<span class="c"># Animal instead of Rabbit, 'animal:‚Ä¶' would be printed.</span>
<span class="n">echo</span> <span class="n">r</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r oopmacro.nim
<span class="go">woof</span>
<span class="go">70</span>
<span class="go">meow</span>
<span class="go">10</span>
<span class="go">meep</span>
<span class="go">3</span>
<span class="go">rabbit:Fluffy:3</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"2/pipeline/source/content/content/oop_macro.md;
TI"<!--- Thanks to fowl for creating this page, filwit for fixing some oddities -->

# OOP Macro
This is the code that we currently must write to use OOP in Nim:

```nimrod
type Animal = ref object of RootObj
  name: string
  age: int
method vocalize(this: Animal): string {.base.} = "..."
method ageHumanYrs(this: Animal): int {.base.} = this.age

type Dog = ref object of Animal
method vocalize(this: Dog): string = "woof"
method ageHumanYrs(this: Dog): int = this.age * 7

type Cat = ref object of Animal
method vocalize(this: Cat): string = "meow"
```

All these typedefs and `this: T` parameters are repetitive, so it'd be good to write a macro to mask them. Something like this would be best:

```nimrod
class Animal of RootObj:
  var name: string
  var age: int
  method vocalize: string = "..."
  method age_human_yrs: int = this.age # `this` is injected

class Dog of Animal:
  method vocalize: string = "woof"
  method age_human_yrs: int = this.age * 7

class Cat of Animal:
  method vocalize: string = "meow"
```

To get that nice notation, we can use a macro:

```nimrod
import macros

macro class*(head, body: untyped): untyped =
  # The macro is immediate, since all its parameters are untyped.
  # This means, it doesn't resolve identifiers passed to it.

  var typeName, baseName: NimNode

  # flag if object should be exported
  var exported: bool

  if head.kind == nnkInfix and head[0].ident == !"of":
    # `head` is expression `typeName of baseClass`
    # echo head.treeRepr
    # --------------------
    # Infix
    #   Ident !"of"
    #   Ident !"Animal"
    #   Ident !"RootObj"
    typeName = head[1]
    baseName = head[2]

  elif head.kind == nnkInfix and head[0].ident == !"*" and
       head[2].kind == nnkPrefix and head[2][0].ident == !"of":
    # `head` is expression `typeName* of baseClass`
    # echo head.treeRepr
    # --------------------
    # Infix
    #   Ident !"*"
    #   Ident !"Animal"
    #   Prefix
    #     Ident !"of"
    #     Ident !"RootObj"
    typeName = head[1]
    baseName = head[2][1]
    exported = true

  else:
    error "Invalid node: " & head.lispRepr

  # The following prints out the AST structure:
  #
  # import macros
  # dumptree:
  #   type X = ref object of Y
  #     z: int
  # --------------------
  # StmtList
  #   TypeSection
  #     TypeDef
  #       Ident !"X"
  #       Empty
  #       RefTy
  #         ObjectTy
  #           Empty
  #           OfInherit
  #             Ident !"Y"
  #           RecList
  #             IdentDefs
  #               Ident !"z"
  #               Ident !"int"
  #               Empty

  # create a type section in the result
  template typeDecl(a, b): untyped =
    type a = ref object of b

  template typeDeclPub(a, b): untyped =
    type a* = ref object of b

  if exported:
    result = getAst(typeDeclPub(typeName, baseName))
  else:
    result = getAst(typeDecl(typeName, baseName))

  # echo treeRepr(body)
  # --------------------
  # StmtList
  #   VarSection
  #     IdentDefs
  #       Ident !"name"
  #       Ident !"string"
  #       Empty
  #     IdentDefs
  #       Ident !"age"
  #       Ident !"int"
  #       Empty
  #   MethodDef
  #     Ident !"vocalize"
  #     Empty
  #     Empty
  #     FormalParams
  #       Ident !"string"
  #     Empty
  #     Empty
  #     StmtList
  #       StrLit ...
  #   MethodDef
  #     Ident !"age_human_yrs"
  #     Empty
  #     Empty
  #     FormalParams
  #       Ident !"int"
  #     Empty
  #     Empty
  #     StmtList
  #       DotExpr
  #         Ident !"self"
  #         Ident !"age"

  # var declarations will be turned into object fields
  var recList = newNimNode(nnkRecList)

  # expected name of constructor
  let ctorName = newIdentNode("new" & $typeName)

  # Iterate over the statements, adding `self: T`
  # to the parameters of functions, unless the
  # function is a constructor
  for node in body.children:
    case node.kind:

    of nnkMethodDef, nnkProcDef:
      # check if it is the ctor proc
      if node.name.kind != nnkAccQuoted and node.name.basename == ctorName:
        # specify the return type of the ctor proc
        node.params[0] = typeName
      else:
        # inject `self: T` into the arguments
        node.params.insert(1, newIdentDefs(ident("self"), typeName))
      result.add(node)

    of nnkVarSection:
      # variables get turned into fields of the type.
      for n in node.children:
        recList.add(n)

    else:
      result.add(node)

  # Inspect the tree structure:
  #
  # echo result.treeRepr
  # --------------------
  # StmtList
  #   TypeSection
  #     TypeDef
  #       Ident !"Animal"
  #       Empty
  #       RefTy
  #         ObjectTy
  #           Empty
  #           OfInherit
  #             Ident !"RootObj"
  #           Empty   <= We want to replace this
  # MethodDef
  # ...

  result[0][0][2][0][2] = recList

  # Lets inspect the human-readable version of the output
  # echo repr(result)
  # Output:
  #  type
  #    Animal = ref object of RootObj
  #      name: string
  #      age: int
  #
  #  method vocalize(self: Animal): string {.base.} =
  #    "..."
  #
  #  method age_human_yrs(self: Animal): int {.base.} =
  #    self.age
  # ...
  #
  # type
  #   Rabbit = ref object of Animal
  #
  # proc newRabbit(name: string; age: int): Rabbit =
  #   result = Rabbit(name: name, age: age)
  #
  # method vocalize(self: Rabbit): string =
  #   "meep"

# ---

class Animal of RootObj:
  var name: string
  var age: int
  method vocalize: string {.base.} = "..." # use `base` pragma to annotate base methods
  method age_human_yrs: int {.base.} = self.age # `self` is injected
  proc `$`: string = "animal:" & self.name & ":" & $self.age

class Dog of Animal:
  method vocalize: string = "woof"
  method age_human_yrs: int = self.age * 7
  proc `$`: string = "dog:" & self.name & ":" & $self.age

class Cat of Animal:
  method vocalize: string = "meow"
  proc `$`: string = "cat:" & self.name & ":" & $self.age

class Rabbit of Animal:
  proc newRabbit(name: string, age: int) = # the constructor doesn't need a return type
    result = Rabbit(name: name, age: age)
  method vocalize: string = "meep"
  proc `$`: string = "rabbit:" & self.name & ":" & $self.age

# ---

var animals: seq[Animal] = @[]
animals.add(Dog(name: "Sparky", age: 10))
animals.add(Cat(name: "Mitten", age: 10))

for a in animals:
  echo a.vocalize()
  echo a.age_human_yrs()

let r = newRabbit("Fluffy", 3)
echo r.vocalize()
echo r.age_human_yrs()
# `$` is not dynamically dispatched--if `r`'s type was
# Animal instead of Rabbit, 'animal:‚Ä¶' would be printed.
echo r
```
``` console
$ nim c -r oopmacro.nim
woof
70
meow
10
meep
3
rabbit:Fluffy:3
```
;
T;U;[0I"Ée<!--- Thanks to fowl for creating this page, filwit for fixing some oddities -->

<h1 id="oop-macro">OOP Macro</h1>
<p>This is the code that we currently must write to use OOP in Nim:</p>

<pre><code class="language-nimrod"><span class="k">type</span> <span class="n">Animal</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">RootObj</span>
  <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="s">"..."</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Animal</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span>

<span class="k">type</span> <span class="n">Dog</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
<span class="k">method</span> <span class="n">ageHumanYrs</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Dog</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>

<span class="k">type</span> <span class="n">Cat</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">Animal</span>
<span class="k">method</span> <span class="n">vocalize</span><span class="p">(</span><span class="n">this</span><span class="p">:</span> <span class="n">Cat</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span></code></pre>

<p>All these typedefs and <code>this: T</code> parameters are repetitive, so it‚Äôd be good to write a macro to mask them. Something like this would be best:</p>

<pre><code class="language-nimrod"><span class="n">class</span> <span class="n">Animal</span> <span class="k">of</span> <span class="n">RootObj</span><span class="p">:</span>
  <span class="kd">var</span> <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="kd">var</span> <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"..."</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="c"># `this` is injected</span>

<span class="n">class</span> <span class="n">Dog</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">this</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>

<span class="n">class</span> <span class="n">Cat</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span></code></pre>

<p>To get that nice notation, we can use a macro:</p>

<pre><code class="language-nimrod"><span class="kn">import</span> <span class="n">macros</span>

<span class="k">macro</span> <span class="n">class</span><span class="o">*</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">:</span> <span class="n">untyped</span><span class="p">):</span> <span class="n">untyped</span> <span class="o">=</span>
  <span class="c"># The macro is immediate, since all its parameters are untyped.</span>
  <span class="c"># This means, it doesn't resolve identifiers passed to it.</span>

  <span class="kd">var</span> <span class="n">typeName</span><span class="p">,</span> <span class="n">baseName</span><span class="p">:</span> <span class="n">NimNode</span>

  <span class="c"># flag if object should be exported</span>
  <span class="kd">var</span> <span class="n">exported</span><span class="p">:</span> <span class="kt">bool</span>

  <span class="k">if</span> <span class="n">head</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">nnkInfix</span> <span class="ow">and</span> <span class="n">head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="o">!</span><span class="s">"of"</span><span class="p">:</span>
    <span class="c"># `head` is expression `typeName of baseClass`</span>
    <span class="c"># echo head.treeRepr</span>
    <span class="c"># --------------------</span>
    <span class="c"># Infix</span>
    <span class="c">#   Ident !"of"</span>
    <span class="c">#   Ident !"Animal"</span>
    <span class="c">#   Ident !"RootObj"</span>
    <span class="n">typeName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">baseName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>

  <span class="k">elif</span> <span class="n">head</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">nnkInfix</span> <span class="ow">and</span> <span class="n">head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="o">!</span><span class="s">"*"</span> <span class="ow">and</span>
       <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">nnkPrefix</span> <span class="ow">and</span> <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="o">!</span><span class="s">"of"</span><span class="p">:</span>
    <span class="c"># `head` is expression `typeName* of baseClass`</span>
    <span class="c"># echo head.treeRepr</span>
    <span class="c"># --------------------</span>
    <span class="c"># Infix</span>
    <span class="c">#   Ident !"*"</span>
    <span class="c">#   Ident !"Animal"</span>
    <span class="c">#   Prefix</span>
    <span class="c">#     Ident !"of"</span>
    <span class="c">#     Ident !"RootObj"</span>
    <span class="n">typeName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">baseName</span> <span class="o">=</span> <span class="n">head</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">exported</span> <span class="o">=</span> <span class="kp">true</span>

  <span class="k">else</span><span class="p">:</span>
    <span class="n">error</span> <span class="s">"Invalid node: "</span> <span class="o">&amp;</span> <span class="n">head</span><span class="p">.</span><span class="n">lispRepr</span>

  <span class="c"># The following prints out the AST structure:</span>
  <span class="c">#</span>
  <span class="c"># import macros</span>
  <span class="c"># dumptree:</span>
  <span class="c">#   type X = ref object of Y</span>
  <span class="c">#     z: int</span>
  <span class="c"># --------------------</span>
  <span class="c"># StmtList</span>
  <span class="c">#   TypeSection</span>
  <span class="c">#     TypeDef</span>
  <span class="c">#       Ident !"X"</span>
  <span class="c">#       Empty</span>
  <span class="c">#       RefTy</span>
  <span class="c">#         ObjectTy</span>
  <span class="c">#           Empty</span>
  <span class="c">#           OfInherit</span>
  <span class="c">#             Ident !"Y"</span>
  <span class="c">#           RecList</span>
  <span class="c">#             IdentDefs</span>
  <span class="c">#               Ident !"z"</span>
  <span class="c">#               Ident !"int"</span>
  <span class="c">#               Empty</span>

  <span class="c"># create a type section in the result</span>
  <span class="k">template</span> <span class="n">typeDecl</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span> <span class="n">untyped</span> <span class="o">=</span>
    <span class="k">type</span> <span class="n">a</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">b</span>

  <span class="k">template</span> <span class="n">typeDeclPub</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span> <span class="n">untyped</span> <span class="o">=</span>
    <span class="k">type</span> <span class="n">a</span><span class="o">*</span> <span class="o">=</span> <span class="k">ref</span> <span class="k">object</span> <span class="k">of</span> <span class="n">b</span>

  <span class="k">if</span> <span class="n">exported</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">getAst</span><span class="p">(</span><span class="n">typeDeclPub</span><span class="p">(</span><span class="n">typeName</span><span class="p">,</span> <span class="n">baseName</span><span class="p">))</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">getAst</span><span class="p">(</span><span class="n">typeDecl</span><span class="p">(</span><span class="n">typeName</span><span class="p">,</span> <span class="n">baseName</span><span class="p">))</span>

  <span class="c"># echo treeRepr(body)</span>
  <span class="c"># --------------------</span>
  <span class="c"># StmtList</span>
  <span class="c">#   VarSection</span>
  <span class="c">#     IdentDefs</span>
  <span class="c">#       Ident !"name"</span>
  <span class="c">#       Ident !"string"</span>
  <span class="c">#       Empty</span>
  <span class="c">#     IdentDefs</span>
  <span class="c">#       Ident !"age"</span>
  <span class="c">#       Ident !"int"</span>
  <span class="c">#       Empty</span>
  <span class="c">#   MethodDef</span>
  <span class="c">#     Ident !"vocalize"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     FormalParams</span>
  <span class="c">#       Ident !"string"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     StmtList</span>
  <span class="c">#       StrLit ...</span>
  <span class="c">#   MethodDef</span>
  <span class="c">#     Ident !"age_human_yrs"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     FormalParams</span>
  <span class="c">#       Ident !"int"</span>
  <span class="c">#     Empty</span>
  <span class="c">#     Empty</span>
  <span class="c">#     StmtList</span>
  <span class="c">#       DotExpr</span>
  <span class="c">#         Ident !"self"</span>
  <span class="c">#         Ident !"age"</span>

  <span class="c"># var declarations will be turned into object fields</span>
  <span class="kd">var</span> <span class="n">recList</span> <span class="o">=</span> <span class="n">newNimNode</span><span class="p">(</span><span class="n">nnkRecList</span><span class="p">)</span>

  <span class="c"># expected name of constructor</span>
  <span class="k">let</span> <span class="n">ctorName</span> <span class="o">=</span> <span class="n">newIdentNode</span><span class="p">(</span><span class="s">"new"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">typeName</span><span class="p">)</span>

  <span class="c"># Iterate over the statements, adding `self: T`</span>
  <span class="c"># to the parameters of functions, unless the</span>
  <span class="c"># function is a constructor</span>
  <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">body</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
    <span class="k">case</span> <span class="n">node</span><span class="p">.</span><span class="n">kind</span><span class="p">:</span>

    <span class="k">of</span> <span class="n">nnkMethodDef</span><span class="p">,</span> <span class="n">nnkProcDef</span><span class="p">:</span>
      <span class="c"># check if it is the ctor proc</span>
      <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">kind</span> <span class="o">!=</span> <span class="n">nnkAccQuoted</span> <span class="ow">and</span> <span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">basename</span> <span class="o">==</span> <span class="n">ctorName</span><span class="p">:</span>
        <span class="c"># specify the return type of the ctor proc</span>
        <span class="n">node</span><span class="p">.</span><span class="n">params</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">typeName</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="c"># inject `self: T` into the arguments</span>
        <span class="n">node</span><span class="p">.</span><span class="n">params</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">newIdentDefs</span><span class="p">(</span><span class="n">ident</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span> <span class="n">typeName</span><span class="p">))</span>
      <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="k">of</span> <span class="n">nnkVarSection</span><span class="p">:</span>
      <span class="c"># variables get turned into fields of the type.</span>
      <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
        <span class="n">recList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
      <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

  <span class="c"># Inspect the tree structure:</span>
  <span class="c">#</span>
  <span class="c"># echo result.treeRepr</span>
  <span class="c"># --------------------</span>
  <span class="c"># StmtList</span>
  <span class="c">#   TypeSection</span>
  <span class="c">#     TypeDef</span>
  <span class="c">#       Ident !"Animal"</span>
  <span class="c">#       Empty</span>
  <span class="c">#       RefTy</span>
  <span class="c">#         ObjectTy</span>
  <span class="c">#           Empty</span>
  <span class="c">#           OfInherit</span>
  <span class="c">#             Ident !"RootObj"</span>
  <span class="c">#           Empty   &lt;= We want to replace this</span>
  <span class="c"># MethodDef</span>
  <span class="c"># ...</span>

  <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">recList</span>

  <span class="c"># Lets inspect the human-readable version of the output</span>
  <span class="c"># echo repr(result)</span>
  <span class="c"># Output:</span>
  <span class="c">#  type</span>
  <span class="c">#    Animal = ref object of RootObj</span>
  <span class="c">#      name: string</span>
  <span class="c">#      age: int</span>
  <span class="c">#</span>
  <span class="c">#  method vocalize(self: Animal): string {.base.} =</span>
  <span class="c">#    "..."</span>
  <span class="c">#</span>
  <span class="c">#  method age_human_yrs(self: Animal): int {.base.} =</span>
  <span class="c">#    self.age</span>
  <span class="c"># ...</span>
  <span class="c">#</span>
  <span class="c"># type</span>
  <span class="c">#   Rabbit = ref object of Animal</span>
  <span class="c">#</span>
  <span class="c"># proc newRabbit(name: string; age: int): Rabbit =</span>
  <span class="c">#   result = Rabbit(name: name, age: age)</span>
  <span class="c">#</span>
  <span class="c"># method vocalize(self: Rabbit): string =</span>
  <span class="c">#   "meep"</span>

<span class="c"># ---</span>

<span class="n">class</span> <span class="n">Animal</span> <span class="k">of</span> <span class="n">RootObj</span><span class="p">:</span>
  <span class="kd">var</span> <span class="n">name</span><span class="p">:</span> <span class="kt">string</span>
  <span class="kd">var</span> <span class="n">age</span><span class="p">:</span> <span class="kt">int</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="s">"..."</span> <span class="c"># use `base` pragma to annotate base methods</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="p">{.</span><span class="n">base</span><span class="p">.}</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="c"># `self` is injected</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"animal:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="n">class</span> <span class="n">Dog</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"woof"</span>
  <span class="k">method</span> <span class="n">age_human_yrs</span><span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"dog:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="n">class</span> <span class="n">Cat</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meow"</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"cat:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="n">class</span> <span class="n">Rabbit</span> <span class="k">of</span> <span class="n">Animal</span><span class="p">:</span>
  <span class="k">proc </span><span class="nf">newRabbit</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="kt">string</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="c"># the constructor doesn't need a return type</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">Rabbit</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>
  <span class="k">method</span> <span class="n">vocalize</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"meep"</span>
  <span class="k">proc </span><span class="nf">`$`</span><span class="p">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"rabbit:"</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;</span> <span class="s">":"</span> <span class="o">&amp;</span> <span class="o">$</span><span class="n">self</span><span class="p">.</span><span class="n">age</span>

<span class="c"># ---</span>

<span class="kd">var</span> <span class="n">animals</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="n">Animal</span><span class="o">]</span> <span class="o">=</span> <span class="o">@[]</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dog</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Sparky"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">animals</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Cat</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">"Mitten"</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">))</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">animals</span><span class="p">:</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">vocalize</span><span class="p">()</span>
  <span class="n">echo</span> <span class="n">a</span><span class="p">.</span><span class="n">age_human_yrs</span><span class="p">()</span>

<span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">newRabbit</span><span class="p">(</span><span class="s">"Fluffy"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">echo</span> <span class="n">r</span><span class="p">.</span><span class="n">vocalize</span><span class="p">()</span>
<span class="n">echo</span> <span class="n">r</span><span class="p">.</span><span class="n">age_human_yrs</span><span class="p">()</span>
<span class="c"># `$` is not dynamically dispatched--if `r`'s type was</span>
<span class="c"># Animal instead of Rabbit, 'animal:‚Ä¶' would be printed.</span>
<span class="n">echo</span> <span class="n">r</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r oopmacro.nim
<span class="go">woof</span>
<span class="go">70</span>
<span class="go">meow</span>
<span class="go">10</span>
<span class="go">meep</span>
<span class="go">3</span>
<span class="go">rabbit:Fluffy:3</span></code></pre>
;
T;@Åo;;;;	I"/content/hello_world/;
T{;{	;U;[0I"/@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Hello World</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="hello-world">Hello World</h1>

<p>The code for a simple hello world program is as follows:</p>

<pre><code class="language-nimrod"><span class="n">echo</span> <span class="s">"Hello World"</span></code></pre>

<p>Save this text as <code>helloworld.nim</code>. To compile and execute the program, the following command should be run</p>

<pre><code class="language-console"><span class="gp">$</span> nim c -r --verbosity:0 helloworld.nim
<span class="go">Hello World</span></code></pre>

<p>The command has several elements:</p>

<ul>
  <li>
<code>c</code> is an alias for <code>compile</code>, which compiles the Nim sources into C and then invokes the C compiler on them</li>
  <li>
<code>-r</code> is an alias for <code>--run</code>, which runs the program</li>
  <li>
<code>--verbosity:0</code> makes the compiler only output essential messages, since by default it also outputs some debugging messages. From now on, we assume that <code>--verbosity:0</code> is set</li>
  <li>
<code>./helloworld.nim</code> is the path to the source you want to compile</li>
</ul>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"4/pipeline/source/content/content/hello_world.md;
TI"‹# Hello World

The code for a simple hello world program is as follows:

``` nimrod
echo "Hello World"
```

Save this text as `helloworld.nim`. To compile and execute the program, the following command should be run

``` console
$ nim c -r --verbosity:0 helloworld.nim
Hello World
```

The command has several elements:

* `c` is an alias for `compile`, which compiles the Nim sources into C and then invokes the C compiler on them
* `-r` is an alias for `--run`, which runs the program
* `--verbosity:0` makes the compiler only output essential messages, since by default it also outputs some debugging messages. From now on, we assume that `--verbosity:0` is set
* `./helloworld.nim` is the path to the source you want to compile
;
T;U;[0I"4<h1 id="hello-world">Hello World</h1>

<p>The code for a simple hello world program is as follows:</p>

<pre><code class="language-nimrod"><span class="n">echo</span> <span class="s">"Hello World"</span></code></pre>

<p>Save this text as <code>helloworld.nim</code>. To compile and execute the program, the following command should be run</p>

<pre><code class="language-console"><span class="gp">$</span> nim c -r --verbosity:0 helloworld.nim
<span class="go">Hello World</span></code></pre>

<p>The command has several elements:</p>

<ul>
  <li>
<code>c</code> is an alias for <code>compile</code>, which compiles the Nim sources into C and then invokes the C compiler on them</li>
  <li>
<code>-r</code> is an alias for <code>--run</code>, which runs the program</li>
  <li>
<code>--verbosity:0</code> makes the compiler only output essential messages, since by default it also outputs some debugging messages. From now on, we assume that <code>--verbosity:0</code> is set</li>
  <li>
<code>./helloworld.nim</code> is the path to the source you want to compile</li>
</ul>
;
T;@èo;;;;	I"/content/for_iterators/;
T{;{	;U;[0I"¥b<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - For Loops & Iterators</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="for-loops--iterators">For Loops &amp; Iterators</h1>

<p>Nim has first class iterators and syntax to use them, for loops. The <code>continue</code> and <code>break</code> keywords also work inside of for loops. There are two kinds of iterator, and two special methods that for loops work with.</p>

<h2 id="items-and-pairs">
<code>items</code> and <code>pairs</code>
</h2>

<p>When iterating over an object with one item, Nim will call an iterator called <code>items</code> with the first parameter the type you want to iterate over. The same thing happens when iterating with two items, but in that case, the <code>pairs</code> iterator is called.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">CustomRange</span> <span class="o">=</span> <span class="k">object</span>
    <span class="n">low</span><span class="p">:</span> <span class="kt">int</span>
    <span class="n">high</span><span class="p">:</span> <span class="kt">int</span>

<span class="k">iterator</span> <span class="n">items</span><span class="p">(</span><span class="kt">range</span><span class="p">:</span> <span class="n">CustomRange</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="kt">range</span><span class="p">.</span><span class="n">low</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="kt">range</span><span class="p">.</span><span class="n">high</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">i</span>
    <span class="n">inc</span> <span class="n">i</span>

<span class="k">iterator</span> <span class="n">pairs</span><span class="p">(</span><span class="kt">range</span><span class="p">:</span> <span class="n">CustomRange</span><span class="p">):</span> <span class="k">tuple</span><span class="o">[</span><span class="n">a</span><span class="p">:</span> <span class="kt">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">char</span><span class="o">]</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="kt">range</span><span class="p">:</span>  <span class="c"># uses CustomRange.items</span>
    <span class="k">yield</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="kt">char</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">ord</span><span class="p">(</span><span class="sc">'a'</span><span class="p">)))</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">CustomRange</span><span class="p">(</span><span class="n">low</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">:</span> <span class="mi">3</span><span class="p">):</span>
  <span class="n">echo</span> <span class="n">c</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r items_pair.nim
<span class="go">b</span>
<span class="go">c</span>
<span class="go">d</span></code></pre>

<h2 id="operators">Operators</h2>
<p>Iterators can also be operators <a href="../procs/#operators">in the standard way</a>, with the name enclosed in backticks. For example, the standard library defines the slice iterator, which allows iterating through <a href="../types/enums/#ordinals">ordinal types</a>.</p>

<pre><code class="language-nimrod"><span class="c"># Give it a different name to avoid conflict</span>
<span class="k">iterator</span> <span class="p">`...`</span><span class="o">*[</span><span class="n">T</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">T</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">res</span><span class="p">:</span> <span class="n">T</span> <span class="o">=</span> <span class="n">T</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
  <span class="k">while</span> <span class="n">res</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">res</span>
    <span class="n">inc</span> <span class="n">res</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">...</span><span class="mi">5</span><span class="p">:</span>
  <span class="n">echo</span> <span class="n">i</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r operatoriterator.nim
<span class="go">0</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span>
<span class="go">4</span>
<span class="go">5</span></code></pre>

<h2 id="inline-iterators">Inline Iterators</h2>
<p>Inline iterators basically take the body of the for loop and inline it into the iterator. This means that they do not have any overhead from function calling, but if carelessly created may increase code size dramatically.</p>

<pre><code class="language-nimrod"><span class="k">iterator</span> <span class="n">countTo</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">i</span>
    <span class="n">inc</span> <span class="n">i</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countTo</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
  <span class="n">echo</span> <span class="n">i</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./inline_iter.nim
<span class="go">0</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span>
<span class="go">4</span>
<span class="go">5</span></code></pre>

<h2 id="closure-iterators">Closure Iterators</h2>
<p>Closure iterators hold on to their state and can be resumed at any time. The <code>finished()</code> function can be used to check if there are any more elements available in the iterator, however raw iterator usage is unintuitive and difficult to get right.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">countTo</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="k">iterator</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="k">return</span> <span class="k">iterator</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span>
    <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
      <span class="k">yield</span> <span class="n">i</span>
      <span class="n">inc</span> <span class="n">i</span>

<span class="k">let</span> <span class="n">countTo20</span> <span class="o">=</span> <span class="n">countTo</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>

<span class="n">echo</span> <span class="n">countTo20</span><span class="p">()</span>

<span class="kd">var</span> <span class="n">output</span> <span class="o">=</span> <span class="s">""</span>
<span class="c"># Raw iterator usage:</span>
<span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
  <span class="c"># 1. grab an element</span>
  <span class="k">let</span> <span class="n">next</span> <span class="o">=</span> <span class="n">countTo20</span><span class="p">()</span>
  <span class="c"># 2. Is the element bogus? Its the end of the loop, discard it</span>
  <span class="k">if</span> <span class="n">finished</span><span class="p">(</span><span class="n">countTo20</span><span class="p">):</span>
    <span class="k">break</span>
  <span class="c"># 3. Loop body goes here:</span>
  <span class="n">output</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">$</span><span class="n">next</span> <span class="o">&amp;</span> <span class="s">" "</span><span class="p">)</span>

<span class="n">echo</span> <span class="n">output</span>

<span class="n">output</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">let</span> <span class="n">countTo9</span> <span class="o">=</span> <span class="n">countTo</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countTo9</span><span class="p">():</span>
  <span class="n">output</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">$</span><span class="n">i</span><span class="p">)</span>
<span class="n">echo</span> <span class="n">output</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./closure_iter.nim
<span class="go">0</span>
<span class="go">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</span>
<span class="go">0123456789</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"6/pipeline/source/content/content/for_iterators.md;
TI"Í
# For Loops & Iterators

Nim has first class iterators and syntax to use them, for loops. The `continue` and `break` keywords also work inside of for loops. There are two kinds of iterator, and two special methods that for loops work with.

## `items` and `pairs`

When iterating over an object with one item, Nim will call an iterator called `items` with the first parameter the type you want to iterate over. The same thing happens when iterating with two items, but in that case, the `pairs` iterator is called.

``` nimrod
type
  CustomRange = object
    low: int
    high: int

iterator items(range: CustomRange): int =
  var i = range.low
  while i <= range.high:
    yield i
    inc i

iterator pairs(range: CustomRange): tuple[a: int, b: char] =
  for i in range:  # uses CustomRange.items
    yield (i, char(i + ord('a')))

for i, c in CustomRange(low: 1, high: 3):
  echo c
```
``` console
$ nim c -r items_pair.nim
b
c
d
```

## Operators
Iterators can also be operators [in the standard way](/procs/#operators), with the name enclosed in backticks. For example, the standard library defines the slice iterator, which allows iterating through [ordinal types](/types/enums/#ordinals).

``` nimrod
# Give it a different name to avoid conflict
iterator `...`*[T](a: T, b: T): T =
  var res: T = T(a)
  while res <= b:
    yield res
    inc res

for i in 0...5:
  echo i
```
``` console
$ nim c -r operatoriterator.nim
0
1
2
3
4
5
```

## Inline Iterators
Inline iterators basically take the body of the for loop and inline it into the iterator. This means that they do not have any overhead from function calling, but if carelessly created may increase code size dramatically.

``` nimrod
iterator countTo(n: int): int =
  var i = 0
  while i <= n:
    yield i
    inc i

for i in countTo(5):
  echo i
```
```console
$ nim c -r ./inline_iter.nim
0
1
2
3
4
5
```


## Closure Iterators
Closure iterators hold on to their state and can be resumed at any time. The `finished()` function can be used to check if there are any more elements available in the iterator, however raw iterator usage is unintuitive and difficult to get right.

``` nimrod
proc countTo(n: int): iterator(): int =
  return iterator(): int =
    var i = 0
    while i <= n:
      yield i
      inc i

let countTo20 = countTo(20)

echo countTo20()

var output = ""
# Raw iterator usage:
while true:
  # 1. grab an element
  let next = countTo20()
  # 2. Is the element bogus? Its the end of the loop, discard it
  if finished(countTo20):
    break
  # 3. Loop body goes here:
  output.add($next & " ")

echo output

output = ""
let countTo9 = countTo(9)
for i in countTo9():
  output.add($i)
echo output
```
```console
$ nim c -r ./closure_iter.nim
0
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
0123456789
```
;
T;U;[0I"Ø&<h1 id="for-loops--iterators">For Loops &amp; Iterators</h1>

<p>Nim has first class iterators and syntax to use them, for loops. The <code>continue</code> and <code>break</code> keywords also work inside of for loops. There are two kinds of iterator, and two special methods that for loops work with.</p>

<h2 id="items-and-pairs">
<code>items</code> and <code>pairs</code>
</h2>

<p>When iterating over an object with one item, Nim will call an iterator called <code>items</code> with the first parameter the type you want to iterate over. The same thing happens when iterating with two items, but in that case, the <code>pairs</code> iterator is called.</p>

<pre><code class="language-nimrod"><span class="k">type</span>
  <span class="n">CustomRange</span> <span class="o">=</span> <span class="k">object</span>
    <span class="n">low</span><span class="p">:</span> <span class="kt">int</span>
    <span class="n">high</span><span class="p">:</span> <span class="kt">int</span>

<span class="k">iterator</span> <span class="n">items</span><span class="p">(</span><span class="kt">range</span><span class="p">:</span> <span class="n">CustomRange</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="kt">range</span><span class="p">.</span><span class="n">low</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="kt">range</span><span class="p">.</span><span class="n">high</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">i</span>
    <span class="n">inc</span> <span class="n">i</span>

<span class="k">iterator</span> <span class="n">pairs</span><span class="p">(</span><span class="kt">range</span><span class="p">:</span> <span class="n">CustomRange</span><span class="p">):</span> <span class="k">tuple</span><span class="o">[</span><span class="n">a</span><span class="p">:</span> <span class="kt">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">char</span><span class="o">]</span> <span class="o">=</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="kt">range</span><span class="p">:</span>  <span class="c"># uses CustomRange.items</span>
    <span class="k">yield</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="kt">char</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">ord</span><span class="p">(</span><span class="sc">'a'</span><span class="p">)))</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">CustomRange</span><span class="p">(</span><span class="n">low</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">:</span> <span class="mi">3</span><span class="p">):</span>
  <span class="n">echo</span> <span class="n">c</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r items_pair.nim
<span class="go">b</span>
<span class="go">c</span>
<span class="go">d</span></code></pre>

<h2 id="operators">Operators</h2>
<p>Iterators can also be operators <a href="../procs/#operators">in the standard way</a>, with the name enclosed in backticks. For example, the standard library defines the slice iterator, which allows iterating through <a href="../types/enums/#ordinals">ordinal types</a>.</p>

<pre><code class="language-nimrod"><span class="c"># Give it a different name to avoid conflict</span>
<span class="k">iterator</span> <span class="p">`...`</span><span class="o">*[</span><span class="n">T</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">T</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">res</span><span class="p">:</span> <span class="n">T</span> <span class="o">=</span> <span class="n">T</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
  <span class="k">while</span> <span class="n">res</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">res</span>
    <span class="n">inc</span> <span class="n">res</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">...</span><span class="mi">5</span><span class="p">:</span>
  <span class="n">echo</span> <span class="n">i</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r operatoriterator.nim
<span class="go">0</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span>
<span class="go">4</span>
<span class="go">5</span></code></pre>

<h2 id="inline-iterators">Inline Iterators</h2>
<p>Inline iterators basically take the body of the for loop and inline it into the iterator. This means that they do not have any overhead from function calling, but if carelessly created may increase code size dramatically.</p>

<pre><code class="language-nimrod"><span class="k">iterator</span> <span class="n">countTo</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">i</span>
    <span class="n">inc</span> <span class="n">i</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countTo</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
  <span class="n">echo</span> <span class="n">i</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./inline_iter.nim
<span class="go">0</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span>
<span class="go">4</span>
<span class="go">5</span></code></pre>

<h2 id="closure-iterators">Closure Iterators</h2>
<p>Closure iterators hold on to their state and can be resumed at any time. The <code>finished()</code> function can be used to check if there are any more elements available in the iterator, however raw iterator usage is unintuitive and difficult to get right.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">countTo</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="k">iterator</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="k">return</span> <span class="k">iterator</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span>
    <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
      <span class="k">yield</span> <span class="n">i</span>
      <span class="n">inc</span> <span class="n">i</span>

<span class="k">let</span> <span class="n">countTo20</span> <span class="o">=</span> <span class="n">countTo</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>

<span class="n">echo</span> <span class="n">countTo20</span><span class="p">()</span>

<span class="kd">var</span> <span class="n">output</span> <span class="o">=</span> <span class="s">""</span>
<span class="c"># Raw iterator usage:</span>
<span class="k">while</span> <span class="kp">true</span><span class="p">:</span>
  <span class="c"># 1. grab an element</span>
  <span class="k">let</span> <span class="n">next</span> <span class="o">=</span> <span class="n">countTo20</span><span class="p">()</span>
  <span class="c"># 2. Is the element bogus? Its the end of the loop, discard it</span>
  <span class="k">if</span> <span class="n">finished</span><span class="p">(</span><span class="n">countTo20</span><span class="p">):</span>
    <span class="k">break</span>
  <span class="c"># 3. Loop body goes here:</span>
  <span class="n">output</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">$</span><span class="n">next</span> <span class="o">&amp;</span> <span class="s">" "</span><span class="p">)</span>

<span class="n">echo</span> <span class="n">output</span>

<span class="n">output</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">let</span> <span class="n">countTo9</span> <span class="o">=</span> <span class="n">countTo</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countTo9</span><span class="p">():</span>
  <span class="n">output</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">$</span><span class="n">i</span><span class="p">)</span>
<span class="n">echo</span> <span class="n">output</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./closure_iter.nim
<span class="go">0</span>
<span class="go">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</span>
<span class="go">0123456789</span></code></pre>
;
T;@ùo;;;;	I"/content/procs/;
T{;{	;U;[0I"]<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Procs</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="procs">Procs</h1>

<p>Procedures in Nim are declared using <code>proc</code> and require that their parameter and return types be annotated. After the types and parameters, an <code>=</code> is used to denote the start of the function body. Another thing to note is that procedures have uniform function call syntax, which means that they can called as both <code>foo(a, b)</code> or <code>a.foo(b)</code>.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">n</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">).</span><span class="n">fibonacci</span></code></pre>

<h2 id="exporting-symbols">Exporting symbols</h2>

<!-- XXX Move into module topic -->
<p>Encapsulation is also supported, not by conventions such as perpending the name with underscores but by annotating a procedure with <code>*</code>, which exports it and makes it available for use by modules.</p>

<pre><code class="language-nimrod"><span class="c"># module1:</span>
<span class="k">proc </span><span class="nf">foo</span><span class="o">*</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">proc </span><span class="nf">bar</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">3</span>

<span class="c"># module2:</span>
<span class="n">echo</span> <span class="n">foo</span><span class="p">()</span>  <span class="c"># Valid</span>
<span class="n">echo</span> <span class="n">bar</span><span class="p">()</span>  <span class="c"># will not compile</span></code></pre>

<h2 id="side-effect-analyses">Side effect analyses</h2>

<p>Nim provides support for functional programming and so includes the <code>{.noSideEffect.}</code> pragma, which statically ensures there are no side effects.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">sum</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span> <span class="n">noSideEffect</span> <span class="p">.}</span> <span class="o">=</span>
  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="k">proc </span><span class="nf">minus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span> <span class="n">noSideEffect</span> <span class="p">.}</span> <span class="o">=</span>
  <span class="n">echo</span> <span class="n">x</span>  <span class="c"># error: 'minus' can have side effects</span>
  <span class="n">x</span> <span class="o">-</span> <span class="n">y</span></code></pre>

<h2 id="operators">Operators</h2>

<p>To create an operator, the symbols that are to be used must be encased inside <code>`</code>s to signify they are operators.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">`$`</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="kt">array</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="kt">array</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="kt">int</span><span class="o">]]</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="s">""</span>
  <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">vx</span> <span class="ow">in</span> <span class="n">v</span><span class="p">:</span>
      <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">$</span><span class="n">vx</span> <span class="o">&amp;</span> <span class="s">", "</span><span class="p">)</span>
    <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="n">echo</span><span class="p">(</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]]</span><span class="p">)</span>  <span class="c"># See varargs for</span>
                        <span class="c"># how echo works</span>

<span class="k">proc </span><span class="nf">`^&amp;*^@%`</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">string</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="sd">## A confusingly named useless operator</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">b</span><span class="o">[</span><span class="n">high</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">]</span>

<span class="n">assert</span><span class="p">(</span><span class="s">"foo"</span> <span class="p">^</span><span class="o">&amp;*</span><span class="p">^</span><span class="o">@%</span> <span class="s">"bar"</span> <span class="o">==</span> <span class="s">"fr"</span><span class="p">)</span></code></pre>

<h2 id="generic-functions">Generic Functions</h2>

<!-- XXX Needs own section -->
<p>Generic functions are like C++‚Äôs templates and allow for the same statically checked duck-typing semantics as templates.</p>

<pre><code class="language-nimrod"><span class="c"># Not really good idea for obvious reasons</span>
<span class="k">let</span> <span class="n">zero</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">proc </span><span class="nf">`+`</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">string</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>

<span class="k">proc </span><span class="nf">`*`</span><span class="o">[</span><span class="n">T</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="n">T</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">zero</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="n">b</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="n">a</span>  <span class="c"># calls `+` from line 3</span>

<span class="n">assert</span><span class="p">(</span><span class="s">"a"</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">==</span> <span class="s">"aaaaaaaaaaa"</span><span class="p">)</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"./pipeline/source/content/content/procs.md;
TI"É# Procs

Procedures in Nim are declared using `proc` and require that their parameter and return types be annotated. After the types and parameters, an `=` is used to denote the start of the function body. Another thing to note is that procedures have uniform function call syntax, which means that they can called as both `foo(a, b)` or `a.foo(b)`.

``` nimrod
proc fibonacci(n: int): int =
  if n < 2:
    result = n
  else:
    result = fibonacci(n - 1) + (n - 2).fibonacci
```

## Exporting symbols

<!-- XXX Move into module topic -->
Encapsulation is also supported, not by conventions such as perpending the name with underscores but by annotating a procedure with `*`, which exports it and makes it available for use by modules.

``` nimrod
# module1:
proc foo*(): int = 2
proc bar(): int = 3

# module2:
echo foo()  # Valid
echo bar()  # will not compile
```

## Side effect analyses

Nim provides support for functional programming and so includes the `{.noSideEffect.}` pragma, which statically ensures there are no side effects.

``` nimrod
proc sum(x, y: int): int {. noSideEffect .} =
  x + y

proc minus(x, y: int): int {. noSideEffect .} =
  echo x  # error: 'minus' can have side effects
  x - y
```

## Operators

To create an operator, the symbols that are to be used must be encased inside `` ` ``s to signify they are operators.

``` nimrod
proc `$`(a: array[2, array[2, int]]): string =
  result = ""
  for v in a:
    for vx in v:
      result.add($vx & ", ")
    result.add("\n")

echo([[1, 2], [3, 4]])  # See varargs for
                        # how echo works

proc `^&*^@%`(a, b: string): string =
  ## A confusingly named useless operator
  result = a[0] & b[high(b)]

assert("foo" ^&*^@% "bar" == "fr")

``` 

## Generic Functions

<!-- XXX Needs own section -->
Generic functions are like C++'s templates and allow for the same statically checked duck-typing semantics as templates. 

``` nimrod
# Not really good idea for obvious reasons
let zero = ""
proc `+`(a, b: string): string =
  a & b

proc `*`[T](a: T, b: int): T =
  result = zero
  for i in 0..b:
    result = result + a  # calls `+` from line 3

assert("a" * 10 == "aaaaaaaaaaa")
```
;
T;U;[0I"*!<h1 id="procs">Procs</h1>

<p>Procedures in Nim are declared using <code>proc</code> and require that their parameter and return types be annotated. After the types and parameters, an <code>=</code> is used to denote the start of the function body. Another thing to note is that procedures have uniform function call syntax, which means that they can called as both <code>foo(a, b)</code> or <code>a.foo(b)</code>.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="o">=</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">n</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">).</span><span class="n">fibonacci</span></code></pre>

<h2 id="exporting-symbols">Exporting symbols</h2>

<!-- XXX Move into module topic -->
<p>Encapsulation is also supported, not by conventions such as perpending the name with underscores but by annotating a procedure with <code>*</code>, which exports it and makes it available for use by modules.</p>

<pre><code class="language-nimrod"><span class="c"># module1:</span>
<span class="k">proc </span><span class="nf">foo</span><span class="o">*</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">proc </span><span class="nf">bar</span><span class="p">():</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">3</span>

<span class="c"># module2:</span>
<span class="n">echo</span> <span class="n">foo</span><span class="p">()</span>  <span class="c"># Valid</span>
<span class="n">echo</span> <span class="n">bar</span><span class="p">()</span>  <span class="c"># will not compile</span></code></pre>

<h2 id="side-effect-analyses">Side effect analyses</h2>

<p>Nim provides support for functional programming and so includes the <code>{.noSideEffect.}</code> pragma, which statically ensures there are no side effects.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">sum</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span> <span class="n">noSideEffect</span> <span class="p">.}</span> <span class="o">=</span>
  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="k">proc </span><span class="nf">minus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">int</span> <span class="p">{.</span> <span class="n">noSideEffect</span> <span class="p">.}</span> <span class="o">=</span>
  <span class="n">echo</span> <span class="n">x</span>  <span class="c"># error: 'minus' can have side effects</span>
  <span class="n">x</span> <span class="o">-</span> <span class="n">y</span></code></pre>

<h2 id="operators">Operators</h2>

<p>To create an operator, the symbols that are to be used must be encased inside <code>`</code>s to signify they are operators.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">`$`</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="kt">array</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="kt">array</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="kt">int</span><span class="o">]]</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="s">""</span>
  <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">vx</span> <span class="ow">in</span> <span class="n">v</span><span class="p">:</span>
      <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">$</span><span class="n">vx</span> <span class="o">&amp;</span> <span class="s">", "</span><span class="p">)</span>
    <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="n">echo</span><span class="p">(</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]]</span><span class="p">)</span>  <span class="c"># See varargs for</span>
                        <span class="c"># how echo works</span>

<span class="k">proc </span><span class="nf">`^&amp;*^@%`</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">string</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="sd">## A confusingly named useless operator</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">b</span><span class="o">[</span><span class="n">high</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">]</span>

<span class="n">assert</span><span class="p">(</span><span class="s">"foo"</span> <span class="p">^</span><span class="o">&amp;*</span><span class="p">^</span><span class="o">@%</span> <span class="s">"bar"</span> <span class="o">==</span> <span class="s">"fr"</span><span class="p">)</span></code></pre>

<h2 id="generic-functions">Generic Functions</h2>

<!-- XXX Needs own section -->
<p>Generic functions are like C++‚Äôs templates and allow for the same statically checked duck-typing semantics as templates.</p>

<pre><code class="language-nimrod"><span class="c"># Not really good idea for obvious reasons</span>
<span class="k">let</span> <span class="n">zero</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">proc </span><span class="nf">`+`</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">string</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>

<span class="k">proc </span><span class="nf">`*`</span><span class="o">[</span><span class="n">T</span><span class="o">]</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="n">T</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">zero</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="n">b</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="n">a</span>  <span class="c"># calls `+` from line 3</span>

<span class="n">assert</span><span class="p">(</span><span class="s">"a"</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">==</span> <span class="s">"aaaaaaaaaaa"</span><span class="p">)</span></code></pre>
;
T;@´o;;;;	I"/content/case/;
T{;{	;U;[0I"N<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Case Statements</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="case-statements">Case Statements</h1>

<p>Nim also supports case statements, which are like switches in other languages. There are several things to note here:</p>

<ul>
  <li>You can use strings in the switch statement</li>
  <li>Sets and ranges of ordinal types are also usable</li>
  <li>case statements, like most things, are actually expressions</li>
  <li>It is required that every possible case be covered</li>
</ul>

<pre><code class="language-nimrod"><span class="k">case</span> <span class="s">"charlie"</span><span class="p">:</span>
  <span class="k">of</span> <span class="s">"alfa"</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"A"</span>
  <span class="k">of</span> <span class="s">"bravo"</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"B"</span>
  <span class="k">of</span> <span class="s">"charlie"</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"C"</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Unrecognized letter"</span>

<span class="k">case</span> <span class="sc">'h'</span><span class="p">:</span>
  <span class="k">of</span> <span class="sc">'a'</span><span class="p">,</span> <span class="sc">'e'</span><span class="p">,</span> <span class="sc">'i'</span><span class="p">,</span> <span class="sc">'o'</span><span class="p">,</span> <span class="sc">'u'</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Vowel"</span>
  <span class="k">of</span> <span class="sc">'</span><span class="se">\127</span><span class="sc">'</span><span class="p">..</span><span class="sc">'</span><span class="se">\255</span><span class="sc">'</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Unknown"</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Consonant"</span>

<span class="k">proc </span><span class="nf">positiveOrNegative</span><span class="p">(</span><span class="n">num</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="k">case</span> <span class="n">num</span><span class="p">:</span>
    <span class="k">of</span> <span class="n">low</span><span class="p">(</span><span class="kt">int</span><span class="p">)..</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
      <span class="s">"negative"</span>
    <span class="k">of</span> <span class="mi">0</span><span class="p">:</span>
      <span class="s">"zero"</span>
    <span class="k">of</span> <span class="mf">1</span><span class="p">..</span><span class="n">high</span><span class="p">(</span><span class="kt">int</span><span class="p">):</span>
      <span class="s">"positive"</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="s">"impossible"</span>

<span class="n">echo</span> <span class="n">positiveOrNegative</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r ./case_stmts.nim
<span class="go">C</span>
<span class="go">Consonant</span>
<span class="go">negative</span></code></pre>

<p>Another feature of case statements is that the possible values are narrowed, meaning that no <code>else</code> statement is necessary in many cases:</p>

<pre><code class="language-nimrod"><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">case</span> <span class="p">(</span><span class="n">x</span> <span class="ow">and</span> <span class="mb">0b11</span><span class="p">)</span> <span class="o">+</span> <span class="mi">7</span><span class="p">:</span>
  <span class="k">of</span> <span class="mi">7</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"A"</span>
  <span class="k">of</span> <span class="mi">8</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"B"</span>
  <span class="k">of</span> <span class="mi">9</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"C"</span>
  <span class="k">of</span> <span class="mi">10</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"D"</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./case_stmts_1.nim
<span class="go">C</span></code></pre>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"-/pipeline/source/content/content/case.md;
TI"…# Case Statements

Nim also supports case statements, which are like switches in other languages. There are several things to note here:

* You can use strings in the switch statement
* Sets and ranges of ordinal types are also usable
* case statements, like most things, are actually expressions
* It is required that every possible case be covered

``` nimrod
case "charlie":
  of "alfa":
    echo "A"
  of "bravo":
    echo "B"
  of "charlie":
    echo "C"
  else:
    echo "Unrecognized letter"

case 'h':
  of 'a', 'e', 'i', 'o', 'u':
    echo "Vowel"
  of '\127'..'\255':
    echo "Unknown"
  else:
    echo "Consonant"

proc positiveOrNegative(num: int): string =
  result = case num:
    of low(int).. -1:
      "negative"
    of 0:
      "zero"
    of 1..high(int):
      "positive"
    else:
      "impossible"

echo positiveOrNegative(-1)
```

``` console
$ nim c -r ./case_stmts.nim
C
Consonant
negative
```

Another feature of case statements is that the possible values are narrowed, meaning that no `else` statement is necessary in many cases:

``` nimrod
let x = 2
case (x and 0b11) + 7:
  of 7: echo "A"
  of 8: echo "B"
  of 9: echo "C"
  of 10: echo "D"
```
``` console
$ nim c -r ./case_stmts_1.nim
C
```
;
T;U;[0I"<h1 id="case-statements">Case Statements</h1>

<p>Nim also supports case statements, which are like switches in other languages. There are several things to note here:</p>

<ul>
  <li>You can use strings in the switch statement</li>
  <li>Sets and ranges of ordinal types are also usable</li>
  <li>case statements, like most things, are actually expressions</li>
  <li>It is required that every possible case be covered</li>
</ul>

<pre><code class="language-nimrod"><span class="k">case</span> <span class="s">"charlie"</span><span class="p">:</span>
  <span class="k">of</span> <span class="s">"alfa"</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"A"</span>
  <span class="k">of</span> <span class="s">"bravo"</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"B"</span>
  <span class="k">of</span> <span class="s">"charlie"</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"C"</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Unrecognized letter"</span>

<span class="k">case</span> <span class="sc">'h'</span><span class="p">:</span>
  <span class="k">of</span> <span class="sc">'a'</span><span class="p">,</span> <span class="sc">'e'</span><span class="p">,</span> <span class="sc">'i'</span><span class="p">,</span> <span class="sc">'o'</span><span class="p">,</span> <span class="sc">'u'</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Vowel"</span>
  <span class="k">of</span> <span class="sc">'</span><span class="se">\127</span><span class="sc">'</span><span class="p">..</span><span class="sc">'</span><span class="se">\255</span><span class="sc">'</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Unknown"</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">echo</span> <span class="s">"Consonant"</span>

<span class="k">proc </span><span class="nf">positiveOrNegative</span><span class="p">(</span><span class="n">num</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span>
  <span class="n">result</span> <span class="o">=</span> <span class="k">case</span> <span class="n">num</span><span class="p">:</span>
    <span class="k">of</span> <span class="n">low</span><span class="p">(</span><span class="kt">int</span><span class="p">)..</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
      <span class="s">"negative"</span>
    <span class="k">of</span> <span class="mi">0</span><span class="p">:</span>
      <span class="s">"zero"</span>
    <span class="k">of</span> <span class="mf">1</span><span class="p">..</span><span class="n">high</span><span class="p">(</span><span class="kt">int</span><span class="p">):</span>
      <span class="s">"positive"</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="s">"impossible"</span>

<span class="n">echo</span> <span class="n">positiveOrNegative</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span></code></pre>

<pre><code class="language-console"><span class="gp">$</span> nim c -r ./case_stmts.nim
<span class="go">C</span>
<span class="go">Consonant</span>
<span class="go">negative</span></code></pre>

<p>Another feature of case statements is that the possible values are narrowed, meaning that no <code>else</code> statement is necessary in many cases:</p>

<pre><code class="language-nimrod"><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">case</span> <span class="p">(</span><span class="n">x</span> <span class="ow">and</span> <span class="mb">0b11</span><span class="p">)</span> <span class="o">+</span> <span class="mi">7</span><span class="p">:</span>
  <span class="k">of</span> <span class="mi">7</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"A"</span>
  <span class="k">of</span> <span class="mi">8</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"B"</span>
  <span class="k">of</span> <span class="mi">9</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"C"</span>
  <span class="k">of</span> <span class="mi">10</span><span class="p">:</span> <span class="n">echo</span> <span class="s">"D"</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r ./case_stmts_1.nim
<span class="go">C</span></code></pre>
;
T;@πo;;;;	I"/content/block/;
T{;{	;U;[0I"™K<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Blocks</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      
<h1 id="blocks">Blocks</h1>

<p>Blocks can be introduced in two different ways: by indenting statements or with <code>()</code>s.</p>

<p>The first way is to use indenting, e.g. using <code>if-elif-else</code>, <code>while</code>, <code>for</code> statements, or the <code>block</code>  statement.</p>

<pre><code class="language-nimrod"><span class="k">if</span> <span class="kp">true</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"Nim is great!"</span>

<span class="k">while</span> <span class="kp">false</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"This line is never output!"</span>

<span class="k">block</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"This line, on the other hand, is always output"</span></code></pre>

<p>The <code>block</code> statement can also be labeled, making it useful for breaking out of loops and is useful for general scoping as well.</p>

<pre><code class="language-nimrod"><span class="k">block</span> <span class="n">outer</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="mi">2000</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="mi">2000</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="o">==</span> <span class="mi">3145</span><span class="p">:</span>
        <span class="n">echo</span> <span class="n">i</span><span class="p">,</span> <span class="s">", "</span><span class="p">,</span> <span class="n">j</span>
        <span class="k">break</span> <span class="n">outer</span>

<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
<span class="k">block</span><span class="p">:</span>
  <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="s">"3"</span>  <span class="c"># shadowing is probably a dumb idea</span></code></pre>

<p>Parentheses can be used as an expression, but they do not provide end of statement inference, so it is necessary to place semicolons yourself. An interesting and unexpected side effect of this syntax is that Nim is suitable even for die-hard brace purists!</p>

<p>While possible, it doesn‚Äôt mean it‚Äôs a good idea. Most Nim code does not use parentheses in that way, and it would not be seen as idiomatic.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">square</span><span class="p">(</span><span class="n">inSeq</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">float</span><span class="o">]</span><span class="p">):</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">float</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">newSeq</span><span class="o">[</span><span class="kt">float</span><span class="o">]</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">inSeq</span><span class="p">));</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">inSeq</span><span class="p">:</span> <span class="p">(</span>
    <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span><span class="p">;</span>
  <span class="p">)</span>
<span class="p">)</span></code></pre>

<!-- XXX FIX
square((  # A 1001 long sequence to be squared
  var result = newSeq[float]();
  for i in 0..1000:
    result.add(i);
  result
))-->

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"./pipeline/source/content/content/block.md;
TI"Ö
# Blocks

Blocks can be introduced in two different ways: by indenting statements or with `()`s.

The first way is to use indenting, e.g. using `if-elif-else`, `while`, `for` statements, or the `block`  statement.

``` nimrod
if true:
  echo "Nim is great!"

while false:
  echo "This line is never output!"

block:
  echo "This line, on the other hand, is always output"
```

The `block` statement can also be labeled, making it useful for breaking out of loops and is useful for general scoping as well. 

``` nimrod
block outer:
  for i in 0..2000:
    for j in 0..2000:
      if i+j == 3145:
        echo i, ", ", j
        break outer

let b = 3
block:
  let b = "3"  # shadowing is probably a dumb idea
```

Parentheses can be used as an expression, but they do not provide end of statement inference, so it is necessary to place semicolons yourself. An interesting and unexpected side effect of this syntax is that Nim is suitable even for die-hard brace purists!

While possible, it doesn't mean it's a good idea. Most Nim code does not use parentheses in that way, and it would not be seen as idiomatic.

``` nimrod
proc square(inSeq: seq[float]): seq[float] = (
  result = newSeq[float](len(inSeq));
  for i, v in inSeq: (
    result[i] = v*v;
  )
)

```

<!-- XXX FIX
square((  # A 1001 long sequence to be squared
  var result = newSeq[float]();
  for i in 0..1000:
    result.add(i);
  result
))-->
;
T;U;[0I"¥
<h1 id="blocks">Blocks</h1>

<p>Blocks can be introduced in two different ways: by indenting statements or with <code>()</code>s.</p>

<p>The first way is to use indenting, e.g. using <code>if-elif-else</code>, <code>while</code>, <code>for</code> statements, or the <code>block</code>  statement.</p>

<pre><code class="language-nimrod"><span class="k">if</span> <span class="kp">true</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"Nim is great!"</span>

<span class="k">while</span> <span class="kp">false</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"This line is never output!"</span>

<span class="k">block</span><span class="p">:</span>
  <span class="n">echo</span> <span class="s">"This line, on the other hand, is always output"</span></code></pre>

<p>The <code>block</code> statement can also be labeled, making it useful for breaking out of loops and is useful for general scoping as well.</p>

<pre><code class="language-nimrod"><span class="k">block</span> <span class="n">outer</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="mi">2000</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="mf">0</span><span class="p">..</span><span class="mi">2000</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="o">==</span> <span class="mi">3145</span><span class="p">:</span>
        <span class="n">echo</span> <span class="n">i</span><span class="p">,</span> <span class="s">", "</span><span class="p">,</span> <span class="n">j</span>
        <span class="k">break</span> <span class="n">outer</span>

<span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
<span class="k">block</span><span class="p">:</span>
  <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="s">"3"</span>  <span class="c"># shadowing is probably a dumb idea</span></code></pre>

<p>Parentheses can be used as an expression, but they do not provide end of statement inference, so it is necessary to place semicolons yourself. An interesting and unexpected side effect of this syntax is that Nim is suitable even for die-hard brace purists!</p>

<p>While possible, it doesn‚Äôt mean it‚Äôs a good idea. Most Nim code does not use parentheses in that way, and it would not be seen as idiomatic.</p>

<pre><code class="language-nimrod"><span class="k">proc </span><span class="nf">square</span><span class="p">(</span><span class="n">inSeq</span><span class="p">:</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">float</span><span class="o">]</span><span class="p">):</span> <span class="kt">seq</span><span class="o">[</span><span class="kt">float</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">newSeq</span><span class="o">[</span><span class="kt">float</span><span class="o">]</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">inSeq</span><span class="p">));</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">inSeq</span><span class="p">:</span> <span class="p">(</span>
    <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span><span class="p">;</span>
  <span class="p">)</span>
<span class="p">)</span></code></pre>

<!-- XXX FIX
square((  # A 1001 long sequence to be squared
  var result = newSeq[float]();
  for i in 0..1000:
    result.add(i);
  result
))-->
;
T;@«o;;;;	I"/content/strings/;
T{;{	;U;[0I"ŸF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
  <head>
    <meta charset="utf-8">

    
      <style>
        html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}code[class^='language-'] .gp{color:#c65d09;font-weight:700;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}body:not(.darkmode) code[class^='language-'] .hll{background-color:#ffc}body:not(.darkmode) code[class^='language-'] .c{color:#808080}body:not(.darkmode) code[class^='language-'] .err{color:#F00000;background-color:#F0A0A0}body:not(.darkmode) code[class^='language-'] .k{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .o{color:#303030}body:not(.darkmode) code[class^='language-'] .cm{color:#808080}body:not(.darkmode) code[class^='language-'] .cp{color:#507090}body:not(.darkmode) code[class^='language-'] .c1{color:#808080}body:not(.darkmode) code[class^='language-'] .cs{color:#c00;font-weight:700}body:not(.darkmode) code[class^='language-'] .gd{color:#A00000}body:not(.darkmode) code[class^='language-'] .ge{font-style:italic}body:not(.darkmode) code[class^='language-'] .gr{color:red}body:not(.darkmode) code[class^='language-'] .gh{color:#000080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gi{color:#00A000}body:not(.darkmode) code[class^='language-'] .go{color:#808080}body:not(.darkmode) code[class^='language-'] .gs{font-weight:700}body:not(.darkmode) code[class^='language-'] .gu{color:#800080;font-weight:700}body:not(.darkmode) code[class^='language-'] .gt{color:#0040D0}body:not(.darkmode) code[class^='language-'] .kc{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kd{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kn{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kp{color:#003080;font-weight:700}body:not(.darkmode) code[class^='language-'] .kr{color:#008000;font-weight:700}body:not(.darkmode) code[class^='language-'] .kt{color:#303090;font-weight:700}body:not(.darkmode) code[class^='language-'] .m{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .s{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .na{color:#0000C0}body:not(.darkmode) code[class^='language-'] .nb{color:#007020}body:not(.darkmode) code[class^='language-'] .nc{color:#B00060;font-weight:700}body:not(.darkmode) code[class^='language-'] .no{color:#003060;font-weight:700}body:not(.darkmode) code[class^='language-'] .nd{color:#505050;font-weight:700}body:not(.darkmode) code[class^='language-'] .ni{color:#800000;font-weight:700}body:not(.darkmode) code[class^='language-'] .ne{color:#F00000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nf{color:#0060B0;font-weight:700}body:not(.darkmode) code[class^='language-'] .nl{color:#907000;font-weight:700}body:not(.darkmode) code[class^='language-'] .nn{color:#0e84b5;font-weight:700}body:not(.darkmode) code[class^='language-'] .nt{color:#007000}body:not(.darkmode) code[class^='language-'] .nv{color:#906030}body:not(.darkmode) code[class^='language-'] .ow{color:#000;font-weight:700}body:not(.darkmode) code[class^='language-'] .w{color:#bbb}body:not(.darkmode) code[class^='language-'] .mf{color:#6000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mh{color:#005080;font-weight:700}body:not(.darkmode) code[class^='language-'] .mi{color:#0000D0;font-weight:700}body:not(.darkmode) code[class^='language-'] .mo{color:#4000E0;font-weight:700}body:not(.darkmode) code[class^='language-'] .sb{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sc{color:#0040D0}body:not(.darkmode) code[class^='language-'] .sd{color:#D04020}body:not(.darkmode) code[class^='language-'] .s2{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .se{color:#606060;font-weight:700;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sh{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .si{background-color:#e0e0e0}body:not(.darkmode) code[class^='language-'] .sx{color:#D02000;background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .sr{color:#000;background-color:#fff0ff}body:not(.darkmode) code[class^='language-'] .s1{background-color:#fff0f0}body:not(.darkmode) code[class^='language-'] .ss{color:#A06000}body:not(.darkmode) code[class^='language-'] .bp{color:#007020}body:not(.darkmode) code[class^='language-'] .vc{color:#306090}body:not(.darkmode) code[class^='language-'] .vg{color:#d07000;font-weight:700}body:not(.darkmode) code[class^='language-'] .vi{color:#3030B0}body:not(.darkmode) code[class^='language-'] .il{color:#0000D0;font-weight:700}body{background:#F5F7F6;color:#000;margin:0;padding:0;max-width:720px;text-rendering:optimizelegibility;font-family:Palatino,serif;line-height:20px}#sidebar{margin:15px;float:left;width:205px;padding:10px 0;background-color:#FFF;box-shadow:0 0 5px 0 rgba(0,0,0,0.5);transition:margin-left 1s}#sidebar.collapsed{margin-left:-180px}#sidebar ul{padding:0 1em;margin:0;list-style-type:none}#sidebar li:before{content:'‚ÅÉ';padding-right:.5em;color:#000}#sidebar li.visited:before{content:'‚úî';padding-right:.2em;color:green}.abs-hamburger{position:relative;width:0;height:0}.nav-toggle{position:absolute;left:175px;width:25px;height:25px;cursor:pointer;margin-right:5px;margin-bottom:5px}.nav-toggle span,.nav-toggle span:before,.nav-toggle span:after{border-radius:1px;height:5px;width:25px;background:#fff;position:absolute;display:block;content:'';box-shadow:inset 0 0 2px 0 #000}.nav-toggle span:before{top:-8px}.nav-toggle span:after{bottom:-8px}.nav-toggle span{margin-top:9.5px}#nextprev{overflow:hidden;padding:.5em 1em}.text-icon{font-size:5em}#arrow-prev{float:left}#arrow-next{float:right}article{margin:15px;transition:max-width 1s}article.expanded{max-width:680px}a{text-decoration:none}a:link,a:visited{color:#B45D47}a:hover{color:#FE3B3B}a.disabled,a:link.disabled,a:visited.disabled{color:#999;pointer-events:none}a:hover.disabled{color:#888}pre,code{font-family:Monaco,Menlo,Consolas,"Courier New",monospace}code{border-radius:1px;background-color:#FFF;padding:.2em}pre code{display:block;padding:1em;white-space:pre-wrap}h1,h2,h3,h4,h5,h6{line-height:125%}footer{margin-top:50px;clear:both;text-align:center;color:#777}footer ul{list-style:none;margin:0;padding:0}footer li{display:inline}footer li+li:before{content:'|'}footer a:link,footer a:visited{color:#777}footer a:hover{color:#999}.notransition{-webkit-transition:none !important;-moz-transition:none !important;-o-transition:none !important;-ms-transition:none !important;transition:none !important}@media screen and (min-width:925px){body{margin:0 auto}body #sidebar.collapsed,body #sidebar{margin-left:-205px}body article.expanded,body article{max-width:none;width:none;min-width:none}}@media screen and (max-width:1200px){body{margin-right:0}}body.darkmode code[class^='language-']{background-color:#333;color:#f8f8f2}body.darkmode code[class^='language-'] .hll{background-color:#49483e}body.darkmode code[class^='language-'] .c{color:#75715e}body.darkmode code[class^='language-'] .err{color:#960050;background-color:#1e0010}body.darkmode code[class^='language-'] .k{color:#66d9ef}body.darkmode code[class^='language-'] .l{color:#ae81ff}body.darkmode code[class^='language-'] .n{color:#f8f8f2}body.darkmode code[class^='language-'] .o{color:#f92672}body.darkmode code[class^='language-'] .p{color:#f8f8f2}body.darkmode code[class^='language-'] .cm{color:#75715e}body.darkmode code[class^='language-'] .cp{color:#75715e}body.darkmode code[class^='language-'] .c1{color:#75715e}body.darkmode code[class^='language-'] .cs{color:#75715e}body.darkmode code[class^='language-'] .ge{font-style:italic}body.darkmode code[class^='language-'] .gs{font-weight:700}body.darkmode code[class^='language-'] .kc{color:#66d9ef}body.darkmode code[class^='language-'] .kd{color:#66d9ef}body.darkmode code[class^='language-'] .kn{color:#f92672}body.darkmode code[class^='language-'] .kp{color:#66d9ef}body.darkmode code[class^='language-'] .kr{color:#66d9ef}body.darkmode code[class^='language-'] .kt{color:#66d9ef}body.darkmode code[class^='language-'] .ld{color:#e6db74}body.darkmode code[class^='language-'] .m{color:#ae81ff}body.darkmode code[class^='language-'] .s{color:#e6db74}body.darkmode code[class^='language-'] .na{color:#a6e22e}body.darkmode code[class^='language-'] .nb{color:#f8f8f2}body.darkmode code[class^='language-'] .nc{color:#a6e22e}body.darkmode code[class^='language-'] .no{color:#66d9ef}body.darkmode code[class^='language-'] .nd{color:#a6e22e}body.darkmode code[class^='language-'] .ni{color:#f8f8f2}body.darkmode code[class^='language-'] .ne{color:#a6e22e}body.darkmode code[class^='language-'] .nf{color:#a6e22e}body.darkmode code[class^='language-'] .nl{color:#f8f8f2}body.darkmode code[class^='language-'] .nn{color:#f8f8f2}body.darkmode code[class^='language-'] .nx{color:#a6e22e}body.darkmode code[class^='language-'] .py{color:#f8f8f2}body.darkmode code[class^='language-'] .nt{color:#f92672}body.darkmode code[class^='language-'] .nv{color:#f8f8f2}body.darkmode code[class^='language-'] .ow{color:#f92672}body.darkmode code[class^='language-'] .w{color:#f8f8f2}body.darkmode code[class^='language-'] .mf{color:#ae81ff}body.darkmode code[class^='language-'] .mh{color:#ae81ff}body.darkmode code[class^='language-'] .mi{color:#ae81ff}body.darkmode code[class^='language-'] .mo{color:#ae81ff}body.darkmode code[class^='language-'] .sb{color:#e6db74}body.darkmode code[class^='language-'] .sc{color:#e6db74}body.darkmode code[class^='language-'] .sd{color:#e6db74}body.darkmode code[class^='language-'] .s2{color:#e6db74}body.darkmode code[class^='language-'] .se{color:#ae81ff}body.darkmode code[class^='language-'] .sh{color:#e6db74}body.darkmode code[class^='language-'] .si{color:#e6db74}body.darkmode code[class^='language-'] .sx{color:#e6db74}body.darkmode code[class^='language-'] .sr{color:#e6db74}body.darkmode code[class^='language-'] .s1{color:#e6db74}body.darkmode code[class^='language-'] .ss{color:#e6db74}body.darkmode code[class^='language-'] .bp{color:#f8f8f2}body.darkmode code[class^='language-'] .vc{color:#f8f8f2}body.darkmode code[class^='language-'] .vg{color:#f8f8f2}body.darkmode code[class^='language-'] .vi{color:#f8f8f2}body.darkmode code[class^='language-'] .il{color:#ae81ff}body.darkmode code[class^='language-'] .gh{}body.darkmode code[class^='language-'] .gu{color:#75715e}body.darkmode code[class^='language-'] .gd{color:#f92672}body.darkmode code[class^='language-'] .gi{color:#a6e22e}
      </style>
      <script async src="/assets/js/all.js"></script>
    

    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({tex2jax: {inlineMath: [['¬´', '¬ª']]}});
      MathJax.Hub.config.tex2jax.skipTags = ["script", "noscript", "style", "textarea", "annotation", "annotation-xml"];
    </script>
    <script async src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS_HTML'></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-58002512-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
      gtag('config', 'UA-58002512-1');
    </script>

    <title>Nim by Example - Strings</title>

    <meta name="generator" content="nanoc 4.3.7">
    <meta http-equiv="Default-Style" content="colorful">
    <meta name=viewport content="width=device-width, initial-scale=1">
  </head>
  <body>

    <div id="sidebar">
      <div class="abs-hamburger"><div class="nav-toggle" onclick="javascript:sidebarClick();"><span></span></div></div>
      <nav>
        <ul>
  <li><a href="/getting_started/">Getting Started</a></li>
  <li><a href="/hello_world/">Hello World</a></li>
  <li><a href="/variables/">Variables</a>
    <ul>
      <li><a href="/variables/result/">Result</a></li>
      <li><a href="/variables/type_casting_inference/">Type Casting and Inference</a></li>
    </ul>
  </li>
  <li><a href="/if_else_while/">If, Else, While</a></li>
  <li><a href="/case/">Case Statements</a></li>
  <li><a href="/for_iterators/">For Loops &amp; Iterators</a></li>
  <li><a href="/procs/">Procs</a></li>
  <li><a href="/procvars/">First Class Functions</a></li>
  <li><a href="/block/">Blocks</a></li>
  <li><a href="/primitives/">Primitive Types</a></li>
  <li><a href="/types/">Type Aliases</a></li>
  <li><a href="/types/objects/">Object Types</a></li>
  <li><a href="/types/enums/">Enum Types</a></li>
  <li><a href="/types/distinct/">Distinct Types</a></li>
  <li><a href="/strings/">Strings</a></li>
  <li><a href="/arrays/">Arrays</a></li>
  <li><a href="/seqs/">Seqs</a></li>
  <li><a href="/bitsets/">Bitsets</a></li>
  <li><a href="/varargs/">Varargs</a></li>
  <li><a href="/oop/">Object Oriented Programming</a></li>
  <li><a href="/oop_macro/">OOP Macro</a></li>
</ul>



      </nav>
    </div>

    <article>
      <h1 id="strings">Strings</h1>

<pre><code class="language-nimrod"><span class="n">echo</span> <span class="s">"words words words ‚öë"</span>
<span class="n">echo</span> <span class="s">"""</span>
<span class="s">&lt;html&gt;</span>
<span class="s">  &lt;head&gt;</span>
<span class="s">  &lt;/head&gt;\n\n</span>

<span class="s">  &lt;body&gt;</span>
<span class="s">  &lt;/body&gt;</span>
<span class="s">&lt;/html&gt; """</span>

<span class="k">proc </span><span class="nf">re</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="kt">string</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="n">s</span>

<span class="n">echo</span> <span class="s">r".</span><span class="se">""</span><span class="s">."</span>
<span class="n">echo</span> <span class="s">re"\b[a-z]++\b"</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r strings.nim
<span class="go">words words words ‚öë</span>
<span class="go">&lt;html&gt;</span>
<span class="go">  &lt;head&gt;</span>
<span class="go">  &lt;head/&gt;\n\n</span>

<span class="go">  &lt;body&gt;</span>
<span class="go">  &lt;body/&gt;</span>
<span class="go">&lt;html/&gt;</span>
<span class="go">.".</span>
<span class="go">\b[a-z]++\b</span></code></pre>

<p>There are several types of string literals:</p>

<ul>
  <li>Quoted Strings: Created by wrapping the body in triple quotes, they never interpret escape codes</li>
  <li>Raw Strings: created by prefixing the string with an <code>r</code>. They do not interpret escape sequences, except for <code>""</code>, which is interpreted as <code>"</code>. This means that <code>r"\b[a-z]\b"</code> is interpreted as <code>\b[a-z]\b</code> instead of failing to compile with a syntax error.</li>
  <li>Proc Strings: raw strings, but the method name that prefixes the string is called, so that <code>foo"12\"</code> -&gt; <code>foo(r"12\")</code>.</li>
</ul>

<p>Strings are null-terminated, so that <code>cstring("foo")</code> requires zero copying. However, you should be careful that the lifetime of the cstring does not exceed the lifetime of the string it is based upon.</p>

<p>Strings can also almost be thought of as <code>seq[char]</code> with respect to assignment semantics. See <a href="../seqs/#immutability">seqs</a></p>

<h2 id="a-note-about-unicode">A note about Unicode</h2>
<p>Unicode symbols are allowed in strings, but are not treated in any special way, so if you want count glyphs or uppercase Unicode symbols, you must use the <code>unicode</code> module.</p>

<p>Strings are generally considered to be encoded as UTF-8, so because of Unicode‚Äôs backwards compatibility, can be treated exactly as ASCII, with all values above 127 ignored.</p>

    </article>

    <div id=nextprev>
      <a id=arrow-prev class="text-icon disabled" href="https://please-enable-js/">‚ÜΩ</a>
      <a id=arrow-next class="text-icon disabled" href="https://please-enable-js/">‚áÅ</a>
    </div>

    <footer>
      <li><a href="https://github.com/flaviut/nim-by-example">Contribute</a></li><li
><a href="#" onclick="toggleDarkMode(); return false;">Toggle dark mode</a></li>


    </footer>
  </body>
</html>
;
T;U;[I"0/pipeline/source/content/content/strings.md;
TI"# Strings

``` nimrod
echo "words words words ‚öë"
echo """
<html>
  <head>
  </head>\n\n

  <body>
  </body>
</html> """

proc re(s: string): string = s

echo r".""."
echo re"\b[a-z]++\b"
```
``` console
$ nim c -r strings.nim
words words words ‚öë
<html>
  <head>
  <head/>\n\n

  <body>
  <body/>
<html/>
.".
\b[a-z]++\b
```

There are several types of string literals:

 - Quoted Strings: Created by wrapping the body in triple quotes, they never interpret escape codes
 - Raw Strings: created by prefixing the string with an `r`. They do not interpret escape sequences, except for `""`, which is interpreted as `"`. This means that `r"\b[a-z]\b"` is interpreted as `\b[a-z]\b` instead of failing to compile with a syntax error.
 - Proc Strings: raw strings, but the method name that prefixes the string is called, so that `foo"12\"` -> `foo(r"12\")`.

Strings are null-terminated, so that `cstring("foo")` requires zero copying. However, you should be careful that the lifetime of the cstring does not exceed the lifetime of the string it is based upon.

Strings can also almost be thought of as `seq[char]` with respect to assignment semantics. See [seqs][]

[seqs]: /seqs/#immutability

## A note about Unicode
Unicode symbols are allowed in strings, but are not treated in any special way, so if you want count glyphs or uppercase Unicode symbols, you must use the `unicode` module.

Strings are generally considered to be encoded as UTF-8, so because of Unicode's backwards compatibility, can be treated exactly as ASCII, with all values above 127 ignored.
;
T;U;[0I"‚
<h1 id="strings">Strings</h1>

<pre><code class="language-nimrod"><span class="n">echo</span> <span class="s">"words words words ‚öë"</span>
<span class="n">echo</span> <span class="s">"""</span>
<span class="s">&lt;html&gt;</span>
<span class="s">  &lt;head&gt;</span>
<span class="s">  &lt;/head&gt;\n\n</span>

<span class="s">  &lt;body&gt;</span>
<span class="s">  &lt;/body&gt;</span>
<span class="s">&lt;/html&gt; """</span>

<span class="k">proc </span><span class="nf">re</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="kt">string</span><span class="p">):</span> <span class="kt">string</span> <span class="o">=</span> <span class="n">s</span>

<span class="n">echo</span> <span class="s">r".</span><span class="se">""</span><span class="s">."</span>
<span class="n">echo</span> <span class="s">re"\b[a-z]++\b"</span></code></pre>
<pre><code class="language-console"><span class="gp">$</span> nim c -r strings.nim
<span class="go">words words words ‚öë</span>
<span class="go">&lt;html&gt;</span>
<span class="go">  &lt;head&gt;</span>
<span class="go">  &lt;head/&gt;\n\n</span>

<span class="go">  &lt;body&gt;</span>
<span class="go">  &lt;body/&gt;</span>
<span class="go">&lt;html/&gt;</span>
<span class="go">.".</span>
<span class="go">\b[a-z]++\b</span></code></pre>

<p>There are several types of string literals:</p>

<ul>
  <li>Quoted Strings: Created by wrapping the body in triple quotes, they never interpret escape codes</li>
  <li>Raw Strings: created by prefixing the string with an <code>r</code>. They do not interpret escape sequences, except for <code>""</code>, which is interpreted as <code>"</code>. This means that <code>r"\b[a-z]\b"</code> is interpreted as <code>\b[a-z]\b</code> instead of failing to compile with a syntax error.</li>
  <li>Proc Strings: raw strings, but the method name that prefixes the string is called, so that <code>foo"12\"</code> -&gt; <code>foo(r"12\")</code>.</li>
</ul>

<p>Strings are null-terminated, so that <code>cstring("foo")</code> requires zero copying. However, you should be careful that the lifetime of the cstring does not exceed the lifetime of the string it is based upon.</p>

<p>Strings can also almost be thought of as <code>seq[char]</code> with respect to assignment semantics. See <a href="../seqs/#immutability">seqs</a></p>

<h2 id="a-note-about-unicode">A note about Unicode</h2>
<p>Unicode symbols are allowed in strings, but are not treated in any special way, so if you want count glyphs or uppercase Unicode symbols, you must use the <code>unicode</code> module.</p>

<p>Strings are generally considered to be encoded as UTF-8, so because of Unicode‚Äôs backwards compatibility, can be treated exactly as ASCII, with all values above 127 ignored.</p>
;
T;@’:versioni